<?php
/**
 * TrackingInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Nmusco\ShipEngine\v1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ShipEngine API
 *
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others.
 *
 * The version of the OpenAPI document: 1.1.202012041812
 * Contact: sales@shipengine.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nmusco\ShipEngine\v1\Model;

use \ArrayAccess;
use \Nmusco\ShipEngine\v1\ObjectSerializer;

/**
 * TrackingInformation Class Doc Comment
 *
 * @category Class
 * @description A tracking information resource
 * @package  Nmusco\ShipEngine\v1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TrackingInformation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'tracking_information';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'tracking_number' => 'string',
        'status_code' => 'string',
        'status_description' => 'string',
        'carrier_status_code' => 'string',
        'carrier_status_description' => 'string',
        'ship_date' => '\DateTime',
        'estimated_delivery_date' => '\DateTime',
        'actual_delivery_date' => '\DateTime',
        'exception_description' => 'string',
        'events' => '\Nmusco\ShipEngine\v1\Model\TrackEvent[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'tracking_number' => null,
        'status_code' => null,
        'status_description' => null,
        'carrier_status_code' => null,
        'carrier_status_description' => null,
        'ship_date' => null,
        'estimated_delivery_date' => null,
        'actual_delivery_date' => null,
        'exception_description' => null,
        'events' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tracking_number' => 'tracking_number',
        'status_code' => 'status_code',
        'status_description' => 'status_description',
        'carrier_status_code' => 'carrier_status_code',
        'carrier_status_description' => 'carrier_status_description',
        'ship_date' => 'ship_date',
        'estimated_delivery_date' => 'estimated_delivery_date',
        'actual_delivery_date' => 'actual_delivery_date',
        'exception_description' => 'exception_description',
        'events' => 'events'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tracking_number' => 'setTrackingNumber',
        'status_code' => 'setStatusCode',
        'status_description' => 'setStatusDescription',
        'carrier_status_code' => 'setCarrierStatusCode',
        'carrier_status_description' => 'setCarrierStatusDescription',
        'ship_date' => 'setShipDate',
        'estimated_delivery_date' => 'setEstimatedDeliveryDate',
        'actual_delivery_date' => 'setActualDeliveryDate',
        'exception_description' => 'setExceptionDescription',
        'events' => 'setEvents'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tracking_number' => 'getTrackingNumber',
        'status_code' => 'getStatusCode',
        'status_description' => 'getStatusDescription',
        'carrier_status_code' => 'getCarrierStatusCode',
        'carrier_status_description' => 'getCarrierStatusDescription',
        'ship_date' => 'getShipDate',
        'estimated_delivery_date' => 'getEstimatedDeliveryDate',
        'actual_delivery_date' => 'getActualDeliveryDate',
        'exception_description' => 'getExceptionDescription',
        'events' => 'getEvents'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tracking_number'] = isset($data['tracking_number']) ? $data['tracking_number'] : null;
        $this->container['status_code'] = isset($data['status_code']) ? $data['status_code'] : null;
        $this->container['status_description'] = isset($data['status_description']) ? $data['status_description'] : null;
        $this->container['carrier_status_code'] = isset($data['carrier_status_code']) ? $data['carrier_status_code'] : null;
        $this->container['carrier_status_description'] = isset($data['carrier_status_description']) ? $data['carrier_status_description'] : null;
        $this->container['ship_date'] = isset($data['ship_date']) ? $data['ship_date'] : null;
        $this->container['estimated_delivery_date'] = isset($data['estimated_delivery_date']) ? $data['estimated_delivery_date'] : null;
        $this->container['actual_delivery_date'] = isset($data['actual_delivery_date']) ? $data['actual_delivery_date'] : null;
        $this->container['exception_description'] = isset($data['exception_description']) ? $data['exception_description'] : null;
        $this->container['events'] = isset($data['events']) ? $data['events'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['status_code']) && (mb_strlen($this->container['status_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'status_code', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['status_description']) && (mb_strlen($this->container['status_description']) < 0)) {
            $invalidProperties[] = "invalid value for 'status_description', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['carrier_status_code']) && (mb_strlen($this->container['carrier_status_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'carrier_status_code', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['carrier_status_description']) && (mb_strlen($this->container['carrier_status_description']) < 0)) {
            $invalidProperties[] = "invalid value for 'carrier_status_description', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['exception_description']) && (mb_strlen($this->container['exception_description']) < 0)) {
            $invalidProperties[] = "invalid value for 'exception_description', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tracking_number
     *
     * @return string|null
     */
    public function getTrackingNumber()
    {
        return $this->container['tracking_number'];
    }

    /**
     * Sets tracking_number
     *
     * @param string|null $tracking_number tracking_number
     *
     * @return $this
     */
    public function setTrackingNumber($tracking_number)
    {
        $this->container['tracking_number'] = $tracking_number;

        return $this;
    }

    /**
     * Gets status_code
     *
     * @return string|null
     */
    public function getStatusCode()
    {
        return $this->container['status_code'];
    }

    /**
     * Sets status_code
     *
     * @param string|null $status_code Status code
     *
     * @return $this
     */
    public function setStatusCode($status_code)
    {

        if (!is_null($status_code) && (mb_strlen($status_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $status_code when calling TrackingInformation., must be bigger than or equal to 1.');
        }

        $this->container['status_code'] = $status_code;

        return $this;
    }

    /**
     * Gets status_description
     *
     * @return string|null
     */
    public function getStatusDescription()
    {
        return $this->container['status_description'];
    }

    /**
     * Sets status_description
     *
     * @param string|null $status_description Status description
     *
     * @return $this
     */
    public function setStatusDescription($status_description)
    {

        if (!is_null($status_description) && (mb_strlen($status_description) < 0)) {
            throw new \InvalidArgumentException('invalid length for $status_description when calling TrackingInformation., must be bigger than or equal to 0.');
        }

        $this->container['status_description'] = $status_description;

        return $this;
    }

    /**
     * Gets carrier_status_code
     *
     * @return string|null
     */
    public function getCarrierStatusCode()
    {
        return $this->container['carrier_status_code'];
    }

    /**
     * Sets carrier_status_code
     *
     * @param string|null $carrier_status_code Carrier status code
     *
     * @return $this
     */
    public function setCarrierStatusCode($carrier_status_code)
    {

        if (!is_null($carrier_status_code) && (mb_strlen($carrier_status_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $carrier_status_code when calling TrackingInformation., must be bigger than or equal to 1.');
        }

        $this->container['carrier_status_code'] = $carrier_status_code;

        return $this;
    }

    /**
     * Gets carrier_status_description
     *
     * @return string|null
     */
    public function getCarrierStatusDescription()
    {
        return $this->container['carrier_status_description'];
    }

    /**
     * Sets carrier_status_description
     *
     * @param string|null $carrier_status_description carrier status description
     *
     * @return $this
     */
    public function setCarrierStatusDescription($carrier_status_description)
    {

        if (!is_null($carrier_status_description) && (mb_strlen($carrier_status_description) < 0)) {
            throw new \InvalidArgumentException('invalid length for $carrier_status_description when calling TrackingInformation., must be bigger than or equal to 0.');
        }

        $this->container['carrier_status_description'] = $carrier_status_description;

        return $this;
    }

    /**
     * Gets ship_date
     *
     * @return \DateTime|null
     */
    public function getShipDate()
    {
        return $this->container['ship_date'];
    }

    /**
     * Sets ship_date
     *
     * @param \DateTime|null $ship_date ship_date
     *
     * @return $this
     */
    public function setShipDate($ship_date)
    {
        $this->container['ship_date'] = $ship_date;

        return $this;
    }

    /**
     * Gets estimated_delivery_date
     *
     * @return \DateTime|null
     */
    public function getEstimatedDeliveryDate()
    {
        return $this->container['estimated_delivery_date'];
    }

    /**
     * Sets estimated_delivery_date
     *
     * @param \DateTime|null $estimated_delivery_date estimated_delivery_date
     *
     * @return $this
     */
    public function setEstimatedDeliveryDate($estimated_delivery_date)
    {
        $this->container['estimated_delivery_date'] = $estimated_delivery_date;

        return $this;
    }

    /**
     * Gets actual_delivery_date
     *
     * @return \DateTime|null
     */
    public function getActualDeliveryDate()
    {
        return $this->container['actual_delivery_date'];
    }

    /**
     * Sets actual_delivery_date
     *
     * @param \DateTime|null $actual_delivery_date actual_delivery_date
     *
     * @return $this
     */
    public function setActualDeliveryDate($actual_delivery_date)
    {
        $this->container['actual_delivery_date'] = $actual_delivery_date;

        return $this;
    }

    /**
     * Gets exception_description
     *
     * @return string|null
     */
    public function getExceptionDescription()
    {
        return $this->container['exception_description'];
    }

    /**
     * Sets exception_description
     *
     * @param string|null $exception_description Exception description
     *
     * @return $this
     */
    public function setExceptionDescription($exception_description)
    {

        if (!is_null($exception_description) && (mb_strlen($exception_description) < 0)) {
            throw new \InvalidArgumentException('invalid length for $exception_description when calling TrackingInformation., must be bigger than or equal to 0.');
        }

        $this->container['exception_description'] = $exception_description;

        return $this;
    }

    /**
     * Gets events
     *
     * @return \Nmusco\ShipEngine\v1\Model\TrackEvent[]|null
     */
    public function getEvents()
    {
        return $this->container['events'];
    }

    /**
     * Sets events
     *
     * @param \Nmusco\ShipEngine\v1\Model\TrackEvent[]|null $events The events that have occured during the lifetime of this tracking number.
     *
     * @return $this
     */
    public function setEvents($events)
    {
        $this->container['events'] = $events;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


