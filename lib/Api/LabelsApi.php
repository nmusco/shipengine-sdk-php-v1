<?php
/**
 * LabelsApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Nmusco\ShipEngine\v1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ShipEngine API
 *
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others.
 *
 * The version of the OpenAPI document: 1.1.202012161912
 * Contact: sales@shipengine.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nmusco\ShipEngine\v1\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;

use Nmusco\ShipEngine\v1\ApiException;
use Nmusco\ShipEngine\v1\Configuration;
use Nmusco\ShipEngine\v1\HeaderSelector;
use Nmusco\ShipEngine\v1\ObjectSerializer;

/**
 * LabelsApi Class Doc Comment
 *
 * @category Class
 * @package  Nmusco\ShipEngine\v1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LabelsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createLabel
     *
     * Purchase Label
     *
     * @param  \Nmusco\ShipEngine\v1\Models\CreateLabelRequestBody $create_label_request_body create_label_request_body (required)
     *
     * @throws \Nmusco\ShipEngine\v1\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Nmusco\ShipEngine\v1\Models\CreateLabelResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody
     */
    public function createLabel($create_label_request_body)
    {
        list($response) = $this->createLabelWithHttpInfo($create_label_request_body);
        return $response;
    }

    /**
     * Operation createLabelWithHttpInfo
     *
     * Purchase Label
     *
     * @param  \Nmusco\ShipEngine\v1\Models\CreateLabelRequestBody $create_label_request_body (required)
     *
     * @throws \Nmusco\ShipEngine\v1\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Nmusco\ShipEngine\v1\Models\CreateLabelResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLabelWithHttpInfo($create_label_request_body)
    {
        $request = $this->createLabelRequest($create_label_request_body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Nmusco\ShipEngine\v1\Models\CreateLabelResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\CreateLabelResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Nmusco\ShipEngine\v1\Models\ErrorResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Nmusco\ShipEngine\v1\Models\ErrorResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Nmusco\ShipEngine\v1\Models\ErrorResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nmusco\ShipEngine\v1\Models\CreateLabelResponseBody';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\CreateLabelResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createLabelAsync
     *
     * Purchase Label
     *
     * @param  \Nmusco\ShipEngine\v1\Models\CreateLabelRequestBody $create_label_request_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLabelAsync($create_label_request_body)
    {
        return $this->createLabelAsyncWithHttpInfo($create_label_request_body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createLabelAsyncWithHttpInfo
     *
     * Purchase Label
     *
     * @param  \Nmusco\ShipEngine\v1\Models\CreateLabelRequestBody $create_label_request_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLabelAsyncWithHttpInfo($create_label_request_body)
    {
        $returnType = '\Nmusco\ShipEngine\v1\Models\CreateLabelResponseBody';
        $request = $this->createLabelRequest($create_label_request_body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createLabel'
     *
     * @param  \Nmusco\ShipEngine\v1\Models\CreateLabelRequestBody $create_label_request_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createLabelRequest($create_label_request_body)
    {
        // verify the required parameter 'create_label_request_body' is set
        if ($create_label_request_body === null || (is_array($create_label_request_body) && count($create_label_request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_label_request_body when calling createLabel'
            );
        }

        $resourcePath = '/v1/labels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($create_label_request_body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_label_request_body));
            } else {
                $httpBody = $create_label_request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createLabelFromRate
     *
     * Purchase Label with Rate ID
     *
     * @param  string $rate_id Rate ID (required)
     * @param  \Nmusco\ShipEngine\v1\Models\CreateLabelFromRateRequestBody $create_label_from_rate_request_body create_label_from_rate_request_body (required)
     *
     * @throws \Nmusco\ShipEngine\v1\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Nmusco\ShipEngine\v1\Models\CreateLabelFromRateResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody
     */
    public function createLabelFromRate($rate_id, $create_label_from_rate_request_body)
    {
        list($response) = $this->createLabelFromRateWithHttpInfo($rate_id, $create_label_from_rate_request_body);
        return $response;
    }

    /**
     * Operation createLabelFromRateWithHttpInfo
     *
     * Purchase Label with Rate ID
     *
     * @param  string $rate_id Rate ID (required)
     * @param  \Nmusco\ShipEngine\v1\Models\CreateLabelFromRateRequestBody $create_label_from_rate_request_body (required)
     *
     * @throws \Nmusco\ShipEngine\v1\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Nmusco\ShipEngine\v1\Models\CreateLabelFromRateResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLabelFromRateWithHttpInfo($rate_id, $create_label_from_rate_request_body)
    {
        $request = $this->createLabelFromRateRequest($rate_id, $create_label_from_rate_request_body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Nmusco\ShipEngine\v1\Models\CreateLabelFromRateResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\CreateLabelFromRateResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Nmusco\ShipEngine\v1\Models\ErrorResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Nmusco\ShipEngine\v1\Models\ErrorResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Nmusco\ShipEngine\v1\Models\ErrorResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nmusco\ShipEngine\v1\Models\CreateLabelFromRateResponseBody';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\CreateLabelFromRateResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createLabelFromRateAsync
     *
     * Purchase Label with Rate ID
     *
     * @param  string $rate_id Rate ID (required)
     * @param  \Nmusco\ShipEngine\v1\Models\CreateLabelFromRateRequestBody $create_label_from_rate_request_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLabelFromRateAsync($rate_id, $create_label_from_rate_request_body)
    {
        return $this->createLabelFromRateAsyncWithHttpInfo($rate_id, $create_label_from_rate_request_body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createLabelFromRateAsyncWithHttpInfo
     *
     * Purchase Label with Rate ID
     *
     * @param  string $rate_id Rate ID (required)
     * @param  \Nmusco\ShipEngine\v1\Models\CreateLabelFromRateRequestBody $create_label_from_rate_request_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLabelFromRateAsyncWithHttpInfo($rate_id, $create_label_from_rate_request_body)
    {
        $returnType = '\Nmusco\ShipEngine\v1\Models\CreateLabelFromRateResponseBody';
        $request = $this->createLabelFromRateRequest($rate_id, $create_label_from_rate_request_body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createLabelFromRate'
     *
     * @param  string $rate_id Rate ID (required)
     * @param  \Nmusco\ShipEngine\v1\Models\CreateLabelFromRateRequestBody $create_label_from_rate_request_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createLabelFromRateRequest($rate_id, $create_label_from_rate_request_body)
    {
        // verify the required parameter 'rate_id' is set
        if ($rate_id === null || (is_array($rate_id) && count($rate_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rate_id when calling createLabelFromRate'
            );
        }
        if (strlen($rate_id) > 25) {
            throw new \InvalidArgumentException('invalid length for "$rate_id" when calling LabelsApi.createLabelFromRate, must be smaller than or equal to 25.');
        }
        if (strlen($rate_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$rate_id" when calling LabelsApi.createLabelFromRate, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^se(-[a-z0-9]+)+$/", $rate_id)) {
            throw new \InvalidArgumentException("invalid value for \"rate_id\" when calling LabelsApi.createLabelFromRate, must conform to the pattern /^se(-[a-z0-9]+)+$/.");
        }

        // verify the required parameter 'create_label_from_rate_request_body' is set
        if ($create_label_from_rate_request_body === null || (is_array($create_label_from_rate_request_body) && count($create_label_from_rate_request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_label_from_rate_request_body when calling createLabelFromRate'
            );
        }

        $resourcePath = '/v1/labels/rates/{rate_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($rate_id !== null) {
            $resourcePath = str_replace(
                '{' . 'rate_id' . '}',
                ObjectSerializer::toPathValue($rate_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($create_label_from_rate_request_body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_label_from_rate_request_body));
            } else {
                $httpBody = $create_label_from_rate_request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createLabelFromShipment
     *
     * Purchase Label with Shipment ID
     *
     * @param  string $shipment_id Shipment ID (required)
     * @param  \Nmusco\ShipEngine\v1\Models\CreateLabelFromShipmentRequestBody $create_label_from_shipment_request_body create_label_from_shipment_request_body (required)
     *
     * @throws \Nmusco\ShipEngine\v1\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Nmusco\ShipEngine\v1\Models\CreateLabelFromShipmentResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody
     */
    public function createLabelFromShipment($shipment_id, $create_label_from_shipment_request_body)
    {
        list($response) = $this->createLabelFromShipmentWithHttpInfo($shipment_id, $create_label_from_shipment_request_body);
        return $response;
    }

    /**
     * Operation createLabelFromShipmentWithHttpInfo
     *
     * Purchase Label with Shipment ID
     *
     * @param  string $shipment_id Shipment ID (required)
     * @param  \Nmusco\ShipEngine\v1\Models\CreateLabelFromShipmentRequestBody $create_label_from_shipment_request_body (required)
     *
     * @throws \Nmusco\ShipEngine\v1\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Nmusco\ShipEngine\v1\Models\CreateLabelFromShipmentResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLabelFromShipmentWithHttpInfo($shipment_id, $create_label_from_shipment_request_body)
    {
        $request = $this->createLabelFromShipmentRequest($shipment_id, $create_label_from_shipment_request_body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Nmusco\ShipEngine\v1\Models\CreateLabelFromShipmentResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\CreateLabelFromShipmentResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Nmusco\ShipEngine\v1\Models\ErrorResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Nmusco\ShipEngine\v1\Models\ErrorResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Nmusco\ShipEngine\v1\Models\ErrorResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nmusco\ShipEngine\v1\Models\CreateLabelFromShipmentResponseBody';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\CreateLabelFromShipmentResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createLabelFromShipmentAsync
     *
     * Purchase Label with Shipment ID
     *
     * @param  string $shipment_id Shipment ID (required)
     * @param  \Nmusco\ShipEngine\v1\Models\CreateLabelFromShipmentRequestBody $create_label_from_shipment_request_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLabelFromShipmentAsync($shipment_id, $create_label_from_shipment_request_body)
    {
        return $this->createLabelFromShipmentAsyncWithHttpInfo($shipment_id, $create_label_from_shipment_request_body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createLabelFromShipmentAsyncWithHttpInfo
     *
     * Purchase Label with Shipment ID
     *
     * @param  string $shipment_id Shipment ID (required)
     * @param  \Nmusco\ShipEngine\v1\Models\CreateLabelFromShipmentRequestBody $create_label_from_shipment_request_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLabelFromShipmentAsyncWithHttpInfo($shipment_id, $create_label_from_shipment_request_body)
    {
        $returnType = '\Nmusco\ShipEngine\v1\Models\CreateLabelFromShipmentResponseBody';
        $request = $this->createLabelFromShipmentRequest($shipment_id, $create_label_from_shipment_request_body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createLabelFromShipment'
     *
     * @param  string $shipment_id Shipment ID (required)
     * @param  \Nmusco\ShipEngine\v1\Models\CreateLabelFromShipmentRequestBody $create_label_from_shipment_request_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createLabelFromShipmentRequest($shipment_id, $create_label_from_shipment_request_body)
    {
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling createLabelFromShipment'
            );
        }
        if (strlen($shipment_id) > 25) {
            throw new \InvalidArgumentException('invalid length for "$shipment_id" when calling LabelsApi.createLabelFromShipment, must be smaller than or equal to 25.');
        }
        if (strlen($shipment_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$shipment_id" when calling LabelsApi.createLabelFromShipment, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^se(-[a-z0-9]+)+$/", $shipment_id)) {
            throw new \InvalidArgumentException("invalid value for \"shipment_id\" when calling LabelsApi.createLabelFromShipment, must conform to the pattern /^se(-[a-z0-9]+)+$/.");
        }

        // verify the required parameter 'create_label_from_shipment_request_body' is set
        if ($create_label_from_shipment_request_body === null || (is_array($create_label_from_shipment_request_body) && count($create_label_from_shipment_request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_label_from_shipment_request_body when calling createLabelFromShipment'
            );
        }

        $resourcePath = '/v1/labels/shipment/{shipment_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipment_id' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($create_label_from_shipment_request_body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_label_from_shipment_request_body));
            } else {
                $httpBody = $create_label_from_shipment_request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createReturnLabel
     *
     * Create a return label
     *
     * @param  string $label_id Label ID (required)
     * @param  \Nmusco\ShipEngine\v1\Models\CreateReturnLabelRequestBody $create_return_label_request_body create_return_label_request_body (required)
     *
     * @throws \Nmusco\ShipEngine\v1\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Nmusco\ShipEngine\v1\Models\CreateReturnLabelResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody
     */
    public function createReturnLabel($label_id, $create_return_label_request_body)
    {
        list($response) = $this->createReturnLabelWithHttpInfo($label_id, $create_return_label_request_body);
        return $response;
    }

    /**
     * Operation createReturnLabelWithHttpInfo
     *
     * Create a return label
     *
     * @param  string $label_id Label ID (required)
     * @param  \Nmusco\ShipEngine\v1\Models\CreateReturnLabelRequestBody $create_return_label_request_body (required)
     *
     * @throws \Nmusco\ShipEngine\v1\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Nmusco\ShipEngine\v1\Models\CreateReturnLabelResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function createReturnLabelWithHttpInfo($label_id, $create_return_label_request_body)
    {
        $request = $this->createReturnLabelRequest($label_id, $create_return_label_request_body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Nmusco\ShipEngine\v1\Models\CreateReturnLabelResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\CreateReturnLabelResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Nmusco\ShipEngine\v1\Models\ErrorResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Nmusco\ShipEngine\v1\Models\ErrorResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Nmusco\ShipEngine\v1\Models\ErrorResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nmusco\ShipEngine\v1\Models\CreateReturnLabelResponseBody';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\CreateReturnLabelResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createReturnLabelAsync
     *
     * Create a return label
     *
     * @param  string $label_id Label ID (required)
     * @param  \Nmusco\ShipEngine\v1\Models\CreateReturnLabelRequestBody $create_return_label_request_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createReturnLabelAsync($label_id, $create_return_label_request_body)
    {
        return $this->createReturnLabelAsyncWithHttpInfo($label_id, $create_return_label_request_body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createReturnLabelAsyncWithHttpInfo
     *
     * Create a return label
     *
     * @param  string $label_id Label ID (required)
     * @param  \Nmusco\ShipEngine\v1\Models\CreateReturnLabelRequestBody $create_return_label_request_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createReturnLabelAsyncWithHttpInfo($label_id, $create_return_label_request_body)
    {
        $returnType = '\Nmusco\ShipEngine\v1\Models\CreateReturnLabelResponseBody';
        $request = $this->createReturnLabelRequest($label_id, $create_return_label_request_body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createReturnLabel'
     *
     * @param  string $label_id Label ID (required)
     * @param  \Nmusco\ShipEngine\v1\Models\CreateReturnLabelRequestBody $create_return_label_request_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createReturnLabelRequest($label_id, $create_return_label_request_body)
    {
        // verify the required parameter 'label_id' is set
        if ($label_id === null || (is_array($label_id) && count($label_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $label_id when calling createReturnLabel'
            );
        }
        if (strlen($label_id) > 25) {
            throw new \InvalidArgumentException('invalid length for "$label_id" when calling LabelsApi.createReturnLabel, must be smaller than or equal to 25.');
        }
        if (strlen($label_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$label_id" when calling LabelsApi.createReturnLabel, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^se(-[a-z0-9]+)+$/", $label_id)) {
            throw new \InvalidArgumentException("invalid value for \"label_id\" when calling LabelsApi.createReturnLabel, must conform to the pattern /^se(-[a-z0-9]+)+$/.");
        }

        // verify the required parameter 'create_return_label_request_body' is set
        if ($create_return_label_request_body === null || (is_array($create_return_label_request_body) && count($create_return_label_request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_return_label_request_body when calling createReturnLabel'
            );
        }

        $resourcePath = '/v1/labels/{label_id}/return';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($label_id !== null) {
            $resourcePath = str_replace(
                '{' . 'label_id' . '}',
                ObjectSerializer::toPathValue($label_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($create_return_label_request_body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_return_label_request_body));
            } else {
                $httpBody = $create_return_label_request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLabelByExternalShipmentId
     *
     * Get Label By External Shipment ID
     *
     * @param  string $external_shipment_id external_shipment_id (required)
     * @param  \Nmusco\ShipEngine\v1\Models\LabelDownloadType $label_download_type label_download_type (optional)
     *
     * @throws \Nmusco\ShipEngine\v1\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Nmusco\ShipEngine\v1\Models\GetLabelByExternalShipmentIdResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody
     */
    public function getLabelByExternalShipmentId($external_shipment_id, $label_download_type = null)
    {
        list($response) = $this->getLabelByExternalShipmentIdWithHttpInfo($external_shipment_id, $label_download_type);
        return $response;
    }

    /**
     * Operation getLabelByExternalShipmentIdWithHttpInfo
     *
     * Get Label By External Shipment ID
     *
     * @param  string $external_shipment_id (required)
     * @param  \Nmusco\ShipEngine\v1\Models\LabelDownloadType $label_download_type (optional)
     *
     * @throws \Nmusco\ShipEngine\v1\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Nmusco\ShipEngine\v1\Models\GetLabelByExternalShipmentIdResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLabelByExternalShipmentIdWithHttpInfo($external_shipment_id, $label_download_type = null)
    {
        $request = $this->getLabelByExternalShipmentIdRequest($external_shipment_id, $label_download_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Nmusco\ShipEngine\v1\Models\GetLabelByExternalShipmentIdResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\GetLabelByExternalShipmentIdResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Nmusco\ShipEngine\v1\Models\ErrorResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Nmusco\ShipEngine\v1\Models\ErrorResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Nmusco\ShipEngine\v1\Models\ErrorResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nmusco\ShipEngine\v1\Models\GetLabelByExternalShipmentIdResponseBody';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\GetLabelByExternalShipmentIdResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLabelByExternalShipmentIdAsync
     *
     * Get Label By External Shipment ID
     *
     * @param  string $external_shipment_id (required)
     * @param  \Nmusco\ShipEngine\v1\Models\LabelDownloadType $label_download_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLabelByExternalShipmentIdAsync($external_shipment_id, $label_download_type = null)
    {
        return $this->getLabelByExternalShipmentIdAsyncWithHttpInfo($external_shipment_id, $label_download_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLabelByExternalShipmentIdAsyncWithHttpInfo
     *
     * Get Label By External Shipment ID
     *
     * @param  string $external_shipment_id (required)
     * @param  \Nmusco\ShipEngine\v1\Models\LabelDownloadType $label_download_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLabelByExternalShipmentIdAsyncWithHttpInfo($external_shipment_id, $label_download_type = null)
    {
        $returnType = '\Nmusco\ShipEngine\v1\Models\GetLabelByExternalShipmentIdResponseBody';
        $request = $this->getLabelByExternalShipmentIdRequest($external_shipment_id, $label_download_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLabelByExternalShipmentId'
     *
     * @param  string $external_shipment_id (required)
     * @param  \Nmusco\ShipEngine\v1\Models\LabelDownloadType $label_download_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLabelByExternalShipmentIdRequest($external_shipment_id, $label_download_type = null)
    {
        // verify the required parameter 'external_shipment_id' is set
        if ($external_shipment_id === null || (is_array($external_shipment_id) && count($external_shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_shipment_id when calling getLabelByExternalShipmentId'
            );
        }

        $resourcePath = '/v1/labels/external_shipment_id/{external_shipment_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($label_download_type !== null) {
            if('form' === 'form' && is_array($label_download_type)) {
                foreach($label_download_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['label_download_type'] = $label_download_type;
            }
        }


        // path params
        if ($external_shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'external_shipment_id' . '}',
                ObjectSerializer::toPathValue($external_shipment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLabelById
     *
     * Get Label By ID
     *
     * @param  string $label_id Label ID (required)
     * @param  \Nmusco\ShipEngine\v1\Models\LabelDownloadType $label_download_type label_download_type (optional)
     *
     * @throws \Nmusco\ShipEngine\v1\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Nmusco\ShipEngine\v1\Models\GetLabelByIdResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody
     */
    public function getLabelById($label_id, $label_download_type = null)
    {
        list($response) = $this->getLabelByIdWithHttpInfo($label_id, $label_download_type);
        return $response;
    }

    /**
     * Operation getLabelByIdWithHttpInfo
     *
     * Get Label By ID
     *
     * @param  string $label_id Label ID (required)
     * @param  \Nmusco\ShipEngine\v1\Models\LabelDownloadType $label_download_type (optional)
     *
     * @throws \Nmusco\ShipEngine\v1\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Nmusco\ShipEngine\v1\Models\GetLabelByIdResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLabelByIdWithHttpInfo($label_id, $label_download_type = null)
    {
        $request = $this->getLabelByIdRequest($label_id, $label_download_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Nmusco\ShipEngine\v1\Models\GetLabelByIdResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\GetLabelByIdResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Nmusco\ShipEngine\v1\Models\ErrorResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Nmusco\ShipEngine\v1\Models\ErrorResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Nmusco\ShipEngine\v1\Models\ErrorResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nmusco\ShipEngine\v1\Models\GetLabelByIdResponseBody';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\GetLabelByIdResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLabelByIdAsync
     *
     * Get Label By ID
     *
     * @param  string $label_id Label ID (required)
     * @param  \Nmusco\ShipEngine\v1\Models\LabelDownloadType $label_download_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLabelByIdAsync($label_id, $label_download_type = null)
    {
        return $this->getLabelByIdAsyncWithHttpInfo($label_id, $label_download_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLabelByIdAsyncWithHttpInfo
     *
     * Get Label By ID
     *
     * @param  string $label_id Label ID (required)
     * @param  \Nmusco\ShipEngine\v1\Models\LabelDownloadType $label_download_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLabelByIdAsyncWithHttpInfo($label_id, $label_download_type = null)
    {
        $returnType = '\Nmusco\ShipEngine\v1\Models\GetLabelByIdResponseBody';
        $request = $this->getLabelByIdRequest($label_id, $label_download_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLabelById'
     *
     * @param  string $label_id Label ID (required)
     * @param  \Nmusco\ShipEngine\v1\Models\LabelDownloadType $label_download_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLabelByIdRequest($label_id, $label_download_type = null)
    {
        // verify the required parameter 'label_id' is set
        if ($label_id === null || (is_array($label_id) && count($label_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $label_id when calling getLabelById'
            );
        }
        if (strlen($label_id) > 25) {
            throw new \InvalidArgumentException('invalid length for "$label_id" when calling LabelsApi.getLabelById, must be smaller than or equal to 25.');
        }
        if (strlen($label_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$label_id" when calling LabelsApi.getLabelById, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^se(-[a-z0-9]+)+$/", $label_id)) {
            throw new \InvalidArgumentException("invalid value for \"label_id\" when calling LabelsApi.getLabelById, must conform to the pattern /^se(-[a-z0-9]+)+$/.");
        }


        $resourcePath = '/v1/labels/{label_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($label_download_type !== null) {
            if('form' === 'form' && is_array($label_download_type)) {
                foreach($label_download_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['label_download_type'] = $label_download_type;
            }
        }


        // path params
        if ($label_id !== null) {
            $resourcePath = str_replace(
                '{' . 'label_id' . '}',
                ObjectSerializer::toPathValue($label_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTrackingLogFromLabel
     *
     * Get Label Tracking Information
     *
     * @param  string $label_id Label ID (required)
     *
     * @throws \Nmusco\ShipEngine\v1\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Nmusco\ShipEngine\v1\Models\GetTrackingLogFromLabelResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody
     */
    public function getTrackingLogFromLabel($label_id)
    {
        list($response) = $this->getTrackingLogFromLabelWithHttpInfo($label_id);
        return $response;
    }

    /**
     * Operation getTrackingLogFromLabelWithHttpInfo
     *
     * Get Label Tracking Information
     *
     * @param  string $label_id Label ID (required)
     *
     * @throws \Nmusco\ShipEngine\v1\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Nmusco\ShipEngine\v1\Models\GetTrackingLogFromLabelResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTrackingLogFromLabelWithHttpInfo($label_id)
    {
        $request = $this->getTrackingLogFromLabelRequest($label_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Nmusco\ShipEngine\v1\Models\GetTrackingLogFromLabelResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\GetTrackingLogFromLabelResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Nmusco\ShipEngine\v1\Models\ErrorResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Nmusco\ShipEngine\v1\Models\ErrorResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Nmusco\ShipEngine\v1\Models\ErrorResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nmusco\ShipEngine\v1\Models\GetTrackingLogFromLabelResponseBody';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\GetTrackingLogFromLabelResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTrackingLogFromLabelAsync
     *
     * Get Label Tracking Information
     *
     * @param  string $label_id Label ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTrackingLogFromLabelAsync($label_id)
    {
        return $this->getTrackingLogFromLabelAsyncWithHttpInfo($label_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTrackingLogFromLabelAsyncWithHttpInfo
     *
     * Get Label Tracking Information
     *
     * @param  string $label_id Label ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTrackingLogFromLabelAsyncWithHttpInfo($label_id)
    {
        $returnType = '\Nmusco\ShipEngine\v1\Models\GetTrackingLogFromLabelResponseBody';
        $request = $this->getTrackingLogFromLabelRequest($label_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTrackingLogFromLabel'
     *
     * @param  string $label_id Label ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTrackingLogFromLabelRequest($label_id)
    {
        // verify the required parameter 'label_id' is set
        if ($label_id === null || (is_array($label_id) && count($label_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $label_id when calling getTrackingLogFromLabel'
            );
        }
        if (strlen($label_id) > 25) {
            throw new \InvalidArgumentException('invalid length for "$label_id" when calling LabelsApi.getTrackingLogFromLabel, must be smaller than or equal to 25.');
        }
        if (strlen($label_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$label_id" when calling LabelsApi.getTrackingLogFromLabel, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^se(-[a-z0-9]+)+$/", $label_id)) {
            throw new \InvalidArgumentException("invalid value for \"label_id\" when calling LabelsApi.getTrackingLogFromLabel, must conform to the pattern /^se(-[a-z0-9]+)+$/.");
        }


        $resourcePath = '/v1/labels/{label_id}/track';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($label_id !== null) {
            $resourcePath = str_replace(
                '{' . 'label_id' . '}',
                ObjectSerializer::toPathValue($label_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listLabels
     *
     * List labels
     *
     * @param  \Nmusco\ShipEngine\v1\Models\LabelStatus $label_status Only return labels that are currently in the specified status (optional)
     * @param  string $service_code Only return labels for a specific [carrier service](https://www.shipengine.com/docs/shipping/use-a-carrier-service/) (optional)
     * @param  string $carrier_id Only return labels for a specific [carrier account](https://www.shipengine.com/docs/carriers/setup/) (optional)
     * @param  string $tracking_number Only return labels with a specific tracking number (optional)
     * @param  string $batch_id Only return labels that were created in a specific [batch](https://www.shipengine.com/docs/labels/bulk/) (optional)
     * @param  string $rate_id Rate ID (optional)
     * @param  string $shipment_id Shipment ID (optional)
     * @param  string $warehouse_id Only return labels that originate from a specific [warehouse](https://www.shipengine.com/docs/shipping/ship-from-a-warehouse/) (optional)
     * @param  \DateTime $created_at_start Only return labels that were created on or after a specific date/time (optional)
     * @param  \DateTime $created_at_end Only return labels that were created on or before a specific date/time (optional)
     * @param  int $page Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned. (optional, default to 1)
     * @param  int $page_size The number of results to return per response. (optional, default to 25)
     * @param  SortDir $sort_dir Controls the sort order of the query. (optional)
     * @param  string $sort_by Controls which field the query is sorted by. (optional, default to 'created_at')
     *
     * @throws \Nmusco\ShipEngine\v1\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Nmusco\ShipEngine\v1\Models\ListLabelsResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody
     */
    public function listLabels($label_status = null, $service_code = null, $carrier_id = null, $tracking_number = null, $batch_id = null, $rate_id = null, $shipment_id = null, $warehouse_id = null, $created_at_start = null, $created_at_end = null, $page = 1, $page_size = 25, $sort_dir = null, $sort_by = 'created_at')
    {
        list($response) = $this->listLabelsWithHttpInfo($label_status, $service_code, $carrier_id, $tracking_number, $batch_id, $rate_id, $shipment_id, $warehouse_id, $created_at_start, $created_at_end, $page, $page_size, $sort_dir, $sort_by);
        return $response;
    }

    /**
     * Operation listLabelsWithHttpInfo
     *
     * List labels
     *
     * @param  \Nmusco\ShipEngine\v1\Models\LabelStatus $label_status Only return labels that are currently in the specified status (optional)
     * @param  string $service_code Only return labels for a specific [carrier service](https://www.shipengine.com/docs/shipping/use-a-carrier-service/) (optional)
     * @param  string $carrier_id Only return labels for a specific [carrier account](https://www.shipengine.com/docs/carriers/setup/) (optional)
     * @param  string $tracking_number Only return labels with a specific tracking number (optional)
     * @param  string $batch_id Only return labels that were created in a specific [batch](https://www.shipengine.com/docs/labels/bulk/) (optional)
     * @param  string $rate_id Rate ID (optional)
     * @param  string $shipment_id Shipment ID (optional)
     * @param  string $warehouse_id Only return labels that originate from a specific [warehouse](https://www.shipengine.com/docs/shipping/ship-from-a-warehouse/) (optional)
     * @param  \DateTime $created_at_start Only return labels that were created on or after a specific date/time (optional)
     * @param  \DateTime $created_at_end Only return labels that were created on or before a specific date/time (optional)
     * @param  int $page Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned. (optional, default to 1)
     * @param  int $page_size The number of results to return per response. (optional, default to 25)
     * @param  SortDir $sort_dir Controls the sort order of the query. (optional)
     * @param  string $sort_by Controls which field the query is sorted by. (optional, default to 'created_at')
     *
     * @throws \Nmusco\ShipEngine\v1\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Nmusco\ShipEngine\v1\Models\ListLabelsResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function listLabelsWithHttpInfo($label_status = null, $service_code = null, $carrier_id = null, $tracking_number = null, $batch_id = null, $rate_id = null, $shipment_id = null, $warehouse_id = null, $created_at_start = null, $created_at_end = null, $page = 1, $page_size = 25, $sort_dir = null, $sort_by = 'created_at')
    {
        $request = $this->listLabelsRequest($label_status, $service_code, $carrier_id, $tracking_number, $batch_id, $rate_id, $shipment_id, $warehouse_id, $created_at_start, $created_at_end, $page, $page_size, $sort_dir, $sort_by);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Nmusco\ShipEngine\v1\Models\ListLabelsResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\ListLabelsResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Nmusco\ShipEngine\v1\Models\ErrorResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Nmusco\ShipEngine\v1\Models\ErrorResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nmusco\ShipEngine\v1\Models\ListLabelsResponseBody';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\ListLabelsResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listLabelsAsync
     *
     * List labels
     *
     * @param  \Nmusco\ShipEngine\v1\Models\LabelStatus $label_status Only return labels that are currently in the specified status (optional)
     * @param  string $service_code Only return labels for a specific [carrier service](https://www.shipengine.com/docs/shipping/use-a-carrier-service/) (optional)
     * @param  string $carrier_id Only return labels for a specific [carrier account](https://www.shipengine.com/docs/carriers/setup/) (optional)
     * @param  string $tracking_number Only return labels with a specific tracking number (optional)
     * @param  string $batch_id Only return labels that were created in a specific [batch](https://www.shipengine.com/docs/labels/bulk/) (optional)
     * @param  string $rate_id Rate ID (optional)
     * @param  string $shipment_id Shipment ID (optional)
     * @param  string $warehouse_id Only return labels that originate from a specific [warehouse](https://www.shipengine.com/docs/shipping/ship-from-a-warehouse/) (optional)
     * @param  \DateTime $created_at_start Only return labels that were created on or after a specific date/time (optional)
     * @param  \DateTime $created_at_end Only return labels that were created on or before a specific date/time (optional)
     * @param  int $page Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned. (optional, default to 1)
     * @param  int $page_size The number of results to return per response. (optional, default to 25)
     * @param  SortDir $sort_dir Controls the sort order of the query. (optional)
     * @param  string $sort_by Controls which field the query is sorted by. (optional, default to 'created_at')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listLabelsAsync($label_status = null, $service_code = null, $carrier_id = null, $tracking_number = null, $batch_id = null, $rate_id = null, $shipment_id = null, $warehouse_id = null, $created_at_start = null, $created_at_end = null, $page = 1, $page_size = 25, $sort_dir = null, $sort_by = 'created_at')
    {
        return $this->listLabelsAsyncWithHttpInfo($label_status, $service_code, $carrier_id, $tracking_number, $batch_id, $rate_id, $shipment_id, $warehouse_id, $created_at_start, $created_at_end, $page, $page_size, $sort_dir, $sort_by)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listLabelsAsyncWithHttpInfo
     *
     * List labels
     *
     * @param  \Nmusco\ShipEngine\v1\Models\LabelStatus $label_status Only return labels that are currently in the specified status (optional)
     * @param  string $service_code Only return labels for a specific [carrier service](https://www.shipengine.com/docs/shipping/use-a-carrier-service/) (optional)
     * @param  string $carrier_id Only return labels for a specific [carrier account](https://www.shipengine.com/docs/carriers/setup/) (optional)
     * @param  string $tracking_number Only return labels with a specific tracking number (optional)
     * @param  string $batch_id Only return labels that were created in a specific [batch](https://www.shipengine.com/docs/labels/bulk/) (optional)
     * @param  string $rate_id Rate ID (optional)
     * @param  string $shipment_id Shipment ID (optional)
     * @param  string $warehouse_id Only return labels that originate from a specific [warehouse](https://www.shipengine.com/docs/shipping/ship-from-a-warehouse/) (optional)
     * @param  \DateTime $created_at_start Only return labels that were created on or after a specific date/time (optional)
     * @param  \DateTime $created_at_end Only return labels that were created on or before a specific date/time (optional)
     * @param  int $page Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned. (optional, default to 1)
     * @param  int $page_size The number of results to return per response. (optional, default to 25)
     * @param  SortDir $sort_dir Controls the sort order of the query. (optional)
     * @param  string $sort_by Controls which field the query is sorted by. (optional, default to 'created_at')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listLabelsAsyncWithHttpInfo($label_status = null, $service_code = null, $carrier_id = null, $tracking_number = null, $batch_id = null, $rate_id = null, $shipment_id = null, $warehouse_id = null, $created_at_start = null, $created_at_end = null, $page = 1, $page_size = 25, $sort_dir = null, $sort_by = 'created_at')
    {
        $returnType = '\Nmusco\ShipEngine\v1\Models\ListLabelsResponseBody';
        $request = $this->listLabelsRequest($label_status, $service_code, $carrier_id, $tracking_number, $batch_id, $rate_id, $shipment_id, $warehouse_id, $created_at_start, $created_at_end, $page, $page_size, $sort_dir, $sort_by);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listLabels'
     *
     * @param  \Nmusco\ShipEngine\v1\Models\LabelStatus $label_status Only return labels that are currently in the specified status (optional)
     * @param  string $service_code Only return labels for a specific [carrier service](https://www.shipengine.com/docs/shipping/use-a-carrier-service/) (optional)
     * @param  string $carrier_id Only return labels for a specific [carrier account](https://www.shipengine.com/docs/carriers/setup/) (optional)
     * @param  string $tracking_number Only return labels with a specific tracking number (optional)
     * @param  string $batch_id Only return labels that were created in a specific [batch](https://www.shipengine.com/docs/labels/bulk/) (optional)
     * @param  string $rate_id Rate ID (optional)
     * @param  string $shipment_id Shipment ID (optional)
     * @param  string $warehouse_id Only return labels that originate from a specific [warehouse](https://www.shipengine.com/docs/shipping/ship-from-a-warehouse/) (optional)
     * @param  \DateTime $created_at_start Only return labels that were created on or after a specific date/time (optional)
     * @param  \DateTime $created_at_end Only return labels that were created on or before a specific date/time (optional)
     * @param  int $page Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned. (optional, default to 1)
     * @param  int $page_size The number of results to return per response. (optional, default to 25)
     * @param  SortDir $sort_dir Controls the sort order of the query. (optional)
     * @param  string $sort_by Controls which field the query is sorted by. (optional, default to 'created_at')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listLabelsRequest($label_status = null, $service_code = null, $carrier_id = null, $tracking_number = null, $batch_id = null, $rate_id = null, $shipment_id = null, $warehouse_id = null, $created_at_start = null, $created_at_end = null, $page = 1, $page_size = 25, $sort_dir = null, $sort_by = 'created_at')
    {
        if ($service_code !== null && !preg_match("/^[a-z0-9]+(_[a-z0-9-]+)* ?$/", $service_code)) {
            throw new \InvalidArgumentException("invalid value for \"service_code\" when calling LabelsApi.listLabels, must conform to the pattern /^[a-z0-9]+(_[a-z0-9-]+)* ?$/.");
        }

        if ($carrier_id !== null && strlen($carrier_id) > 25) {
            throw new \InvalidArgumentException('invalid length for "$carrier_id" when calling LabelsApi.listLabels, must be smaller than or equal to 25.');
        }
        if ($carrier_id !== null && strlen($carrier_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$carrier_id" when calling LabelsApi.listLabels, must be bigger than or equal to 1.');
        }
        if ($carrier_id !== null && !preg_match("/^se(-[a-z0-9]+)+$/", $carrier_id)) {
            throw new \InvalidArgumentException("invalid value for \"carrier_id\" when calling LabelsApi.listLabels, must conform to the pattern /^se(-[a-z0-9]+)+$/.");
        }

        if ($tracking_number !== null && strlen($tracking_number) < 1) {
            throw new \InvalidArgumentException('invalid length for "$tracking_number" when calling LabelsApi.listLabels, must be bigger than or equal to 1.');
        }

        if ($batch_id !== null && strlen($batch_id) > 25) {
            throw new \InvalidArgumentException('invalid length for "$batch_id" when calling LabelsApi.listLabels, must be smaller than or equal to 25.');
        }
        if ($batch_id !== null && strlen($batch_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$batch_id" when calling LabelsApi.listLabels, must be bigger than or equal to 1.');
        }
        if ($batch_id !== null && !preg_match("/^se(-[a-z0-9]+)+$/", $batch_id)) {
            throw new \InvalidArgumentException("invalid value for \"batch_id\" when calling LabelsApi.listLabels, must conform to the pattern /^se(-[a-z0-9]+)+$/.");
        }

        if ($rate_id !== null && strlen($rate_id) > 25) {
            throw new \InvalidArgumentException('invalid length for "$rate_id" when calling LabelsApi.listLabels, must be smaller than or equal to 25.');
        }
        if ($rate_id !== null && strlen($rate_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$rate_id" when calling LabelsApi.listLabels, must be bigger than or equal to 1.');
        }
        if ($rate_id !== null && !preg_match("/^se(-[a-z0-9]+)+$/", $rate_id)) {
            throw new \InvalidArgumentException("invalid value for \"rate_id\" when calling LabelsApi.listLabels, must conform to the pattern /^se(-[a-z0-9]+)+$/.");
        }

        if ($shipment_id !== null && strlen($shipment_id) > 25) {
            throw new \InvalidArgumentException('invalid length for "$shipment_id" when calling LabelsApi.listLabels, must be smaller than or equal to 25.');
        }
        if ($shipment_id !== null && strlen($shipment_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$shipment_id" when calling LabelsApi.listLabels, must be bigger than or equal to 1.');
        }
        if ($shipment_id !== null && !preg_match("/^se(-[a-z0-9]+)+$/", $shipment_id)) {
            throw new \InvalidArgumentException("invalid value for \"shipment_id\" when calling LabelsApi.listLabels, must conform to the pattern /^se(-[a-z0-9]+)+$/.");
        }

        if ($warehouse_id !== null && strlen($warehouse_id) > 25) {
            throw new \InvalidArgumentException('invalid length for "$warehouse_id" when calling LabelsApi.listLabels, must be smaller than or equal to 25.');
        }
        if ($warehouse_id !== null && strlen($warehouse_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$warehouse_id" when calling LabelsApi.listLabels, must be bigger than or equal to 1.');
        }
        if ($warehouse_id !== null && !preg_match("/^se(-[a-z0-9]+)+$/", $warehouse_id)) {
            throw new \InvalidArgumentException("invalid value for \"warehouse_id\" when calling LabelsApi.listLabels, must conform to the pattern /^se(-[a-z0-9]+)+$/.");
        }

        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling LabelsApi.listLabels, must be bigger than or equal to 1.');
        }

        if ($page_size !== null && $page_size < 1) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling LabelsApi.listLabels, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v1/labels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($label_status !== null) {
            if('form' === 'form' && is_array($label_status)) {
                foreach($label_status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['label_status'] = $label_status;
            }
        }
        // query params
        if ($service_code !== null) {
            if('form' === 'form' && is_array($service_code)) {
                foreach($service_code as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['service_code'] = $service_code;
            }
        }
        // query params
        if ($carrier_id !== null) {
            if('form' === 'form' && is_array($carrier_id)) {
                foreach($carrier_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['carrier_id'] = $carrier_id;
            }
        }
        // query params
        if ($tracking_number !== null) {
            if('form' === 'form' && is_array($tracking_number)) {
                foreach($tracking_number as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tracking_number'] = $tracking_number;
            }
        }
        // query params
        if ($batch_id !== null) {
            if('form' === 'form' && is_array($batch_id)) {
                foreach($batch_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['batch_id'] = $batch_id;
            }
        }
        // query params
        if ($rate_id !== null) {
            if('form' === 'form' && is_array($rate_id)) {
                foreach($rate_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['rate_id'] = $rate_id;
            }
        }
        // query params
        if ($shipment_id !== null) {
            if('form' === 'form' && is_array($shipment_id)) {
                foreach($shipment_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['shipment_id'] = $shipment_id;
            }
        }
        // query params
        if ($warehouse_id !== null) {
            if('form' === 'form' && is_array($warehouse_id)) {
                foreach($warehouse_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['warehouse_id'] = $warehouse_id;
            }
        }
        // query params
        if ($created_at_start !== null) {
            if('form' === 'form' && is_array($created_at_start)) {
                foreach($created_at_start as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['created_at_start'] = $created_at_start;
            }
        }
        // query params
        if ($created_at_end !== null) {
            if('form' === 'form' && is_array($created_at_end)) {
                foreach($created_at_end as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['created_at_end'] = $created_at_end;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page_size'] = $page_size;
            }
        }
        // query params
        if ($sort_dir !== null) {
            if('form' === 'form' && is_array($sort_dir)) {
                foreach($sort_dir as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sort_dir'] = $sort_dir;
            }
        }
        // query params
        if ($sort_by !== null) {
            if('form' === 'form' && is_array($sort_by)) {
                foreach($sort_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sort_by'] = $sort_by;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation voidLabel
     *
     * Void a Label By ID
     *
     * @param  string $label_id Label ID (required)
     *
     * @throws \Nmusco\ShipEngine\v1\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Nmusco\ShipEngine\v1\Models\VoidLabelResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody
     */
    public function voidLabel($label_id)
    {
        list($response) = $this->voidLabelWithHttpInfo($label_id);
        return $response;
    }

    /**
     * Operation voidLabelWithHttpInfo
     *
     * Void a Label By ID
     *
     * @param  string $label_id Label ID (required)
     *
     * @throws \Nmusco\ShipEngine\v1\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Nmusco\ShipEngine\v1\Models\VoidLabelResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function voidLabelWithHttpInfo($label_id)
    {
        $request = $this->voidLabelRequest($label_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Nmusco\ShipEngine\v1\Models\VoidLabelResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\VoidLabelResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Nmusco\ShipEngine\v1\Models\ErrorResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Nmusco\ShipEngine\v1\Models\ErrorResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Nmusco\ShipEngine\v1\Models\ErrorResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nmusco\ShipEngine\v1\Models\VoidLabelResponseBody';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\VoidLabelResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation voidLabelAsync
     *
     * Void a Label By ID
     *
     * @param  string $label_id Label ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function voidLabelAsync($label_id)
    {
        return $this->voidLabelAsyncWithHttpInfo($label_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation voidLabelAsyncWithHttpInfo
     *
     * Void a Label By ID
     *
     * @param  string $label_id Label ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function voidLabelAsyncWithHttpInfo($label_id)
    {
        $returnType = '\Nmusco\ShipEngine\v1\Models\VoidLabelResponseBody';
        $request = $this->voidLabelRequest($label_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'voidLabel'
     *
     * @param  string $label_id Label ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function voidLabelRequest($label_id)
    {
        // verify the required parameter 'label_id' is set
        if ($label_id === null || (is_array($label_id) && count($label_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $label_id when calling voidLabel'
            );
        }
        if (strlen($label_id) > 25) {
            throw new \InvalidArgumentException('invalid length for "$label_id" when calling LabelsApi.voidLabel, must be smaller than or equal to 25.');
        }
        if (strlen($label_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$label_id" when calling LabelsApi.voidLabel, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^se(-[a-z0-9]+)+$/", $label_id)) {
            throw new \InvalidArgumentException("invalid value for \"label_id\" when calling LabelsApi.voidLabel, must conform to the pattern /^se(-[a-z0-9]+)+$/.");
        }


        $resourcePath = '/v1/labels/{label_id}/void';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($label_id !== null) {
            $resourcePath = str_replace(
                '{' . 'label_id' . '}',
                ObjectSerializer::toPathValue($label_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
