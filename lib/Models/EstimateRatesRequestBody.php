<?php
/**
 * EstimateRatesRequestBody
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Nmusco\ShipEngine\v1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ShipEngine API
 *
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others.
 *
 * The version of the OpenAPI document: 1.1.202012161912
 * Contact: sales@shipengine.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nmusco\ShipEngine\v1\Models;

use \ArrayAccess;
use \Nmusco\ShipEngine\v1\ObjectSerializer;

/**
 * EstimateRatesRequestBody Class Doc Comment
 *
 * @category Class
 * @description A rate estimate request body
 * @package  Nmusco\ShipEngine\v1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class EstimateRatesRequestBody implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'estimate_rates_request_body';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'from_country_code' => 'string',
        'from_postal_code' => 'string',
        'from_city_locality' => 'string',
        'to_country_code' => 'string',
        'to_postal_code' => 'string',
        'to_city_locality' => 'string',
        'to_state_province' => 'string',
        'weight' => 'Weight',
        'ship_date' => '\DateTime',
        'from_state_province' => 'string',
        'dimensions' => 'Dimensions',
        'confirmation' => 'DeliveryConfirmation',
        'address_residential_indicator' => 'AddressResidentialIndicator'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'from_country_code' => null,
        'from_postal_code' => null,
        'from_city_locality' => null,
        'to_country_code' => null,
        'to_postal_code' => null,
        'to_city_locality' => null,
        'to_state_province' => null,
        'weight' => null,
        'ship_date' => null,
        'from_state_province' => null,
        'dimensions' => null,
        'confirmation' => null,
        'address_residential_indicator' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'from_country_code' => 'from_country_code',
        'from_postal_code' => 'from_postal_code',
        'from_city_locality' => 'from_city_locality',
        'to_country_code' => 'to_country_code',
        'to_postal_code' => 'to_postal_code',
        'to_city_locality' => 'to_city_locality',
        'to_state_province' => 'to_state_province',
        'weight' => 'weight',
        'ship_date' => 'ship_date',
        'from_state_province' => 'from_state_province',
        'dimensions' => 'dimensions',
        'confirmation' => 'confirmation',
        'address_residential_indicator' => 'address_residential_indicator'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'from_country_code' => 'setFromCountryCode',
        'from_postal_code' => 'setFromPostalCode',
        'from_city_locality' => 'setFromCityLocality',
        'to_country_code' => 'setToCountryCode',
        'to_postal_code' => 'setToPostalCode',
        'to_city_locality' => 'setToCityLocality',
        'to_state_province' => 'setToStateProvince',
        'weight' => 'setWeight',
        'ship_date' => 'setShipDate',
        'from_state_province' => 'setFromStateProvince',
        'dimensions' => 'setDimensions',
        'confirmation' => 'setConfirmation',
        'address_residential_indicator' => 'setAddressResidentialIndicator'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'from_country_code' => 'getFromCountryCode',
        'from_postal_code' => 'getFromPostalCode',
        'from_city_locality' => 'getFromCityLocality',
        'to_country_code' => 'getToCountryCode',
        'to_postal_code' => 'getToPostalCode',
        'to_city_locality' => 'getToCityLocality',
        'to_state_province' => 'getToStateProvince',
        'weight' => 'getWeight',
        'ship_date' => 'getShipDate',
        'from_state_province' => 'getFromStateProvince',
        'dimensions' => 'getDimensions',
        'confirmation' => 'getConfirmation',
        'address_residential_indicator' => 'getAddressResidentialIndicator'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['from_country_code'] = $data['from_country_code'] ?? null;
        $this->container['from_postal_code'] = $data['from_postal_code'] ?? null;
        $this->container['from_city_locality'] = $data['from_city_locality'] ?? null;
        $this->container['to_country_code'] = $data['to_country_code'] ?? null;
        $this->container['to_postal_code'] = $data['to_postal_code'] ?? null;
        $this->container['to_city_locality'] = $data['to_city_locality'] ?? null;
        $this->container['to_state_province'] = $data['to_state_province'] ?? null;
        $this->container['weight'] = $data['weight'] ?? null;
        $this->container['ship_date'] = $data['ship_date'] ?? null;
        $this->container['from_state_province'] = $data['from_state_province'] ?? null;
        $this->container['dimensions'] = $data['dimensions'] ?? null;
        $this->container['confirmation'] = $data['confirmation'] ?? null;
        $this->container['address_residential_indicator'] = $data['address_residential_indicator'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['from_country_code'] === null) {
            $invalidProperties[] = "'from_country_code' can't be null";
        }
        if ($this->container['from_postal_code'] === null) {
            $invalidProperties[] = "'from_postal_code' can't be null";
        }
        if ($this->container['from_city_locality'] === null) {
            $invalidProperties[] = "'from_city_locality' can't be null";
        }
        if ((mb_strlen($this->container['from_city_locality']) < 1)) {
            $invalidProperties[] = "invalid value for 'from_city_locality', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['to_country_code'] === null) {
            $invalidProperties[] = "'to_country_code' can't be null";
        }
        if ($this->container['to_postal_code'] === null) {
            $invalidProperties[] = "'to_postal_code' can't be null";
        }
        if ($this->container['to_city_locality'] === null) {
            $invalidProperties[] = "'to_city_locality' can't be null";
        }
        if ((mb_strlen($this->container['to_city_locality']) < 1)) {
            $invalidProperties[] = "invalid value for 'to_city_locality', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['to_state_province'] === null) {
            $invalidProperties[] = "'to_state_province' can't be null";
        }
        if ((mb_strlen($this->container['to_state_province']) < 1)) {
            $invalidProperties[] = "invalid value for 'to_state_province', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['weight'] === null) {
            $invalidProperties[] = "'weight' can't be null";
        }
        if ($this->container['ship_date'] === null) {
            $invalidProperties[] = "'ship_date' can't be null";
        }
        if (!is_null($this->container['from_state_province']) && (mb_strlen($this->container['from_state_province']) < 1)) {
            $invalidProperties[] = "invalid value for 'from_state_province', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets from_country_code
     *
     * @return string
     */
    public function getFromCountryCode()
    {
        return $this->container['from_country_code'];
    }

    /**
     * Sets from_country_code
     *
     * @param string $from_country_code from_country_code
     *
     * @return self
     */
    public function setFromCountryCode($from_country_code)
    {
        $this->container['from_country_code'] = $from_country_code;

        return $this;
    }

    /**
     * Gets from_postal_code
     *
     * @return string
     */
    public function getFromPostalCode()
    {
        return $this->container['from_postal_code'];
    }

    /**
     * Sets from_postal_code
     *
     * @param string $from_postal_code from_postal_code
     *
     * @return self
     */
    public function setFromPostalCode($from_postal_code)
    {
        $this->container['from_postal_code'] = $from_postal_code;

        return $this;
    }

    /**
     * Gets from_city_locality
     *
     * @return string
     */
    public function getFromCityLocality()
    {
        return $this->container['from_city_locality'];
    }

    /**
     * Sets from_city_locality
     *
     * @param string $from_city_locality from postal code
     *
     * @return self
     */
    public function setFromCityLocality($from_city_locality)
    {

        if ((mb_strlen($from_city_locality) < 1)) {
            throw new \InvalidArgumentException('invalid length for $from_city_locality when calling EstimateRatesRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['from_city_locality'] = $from_city_locality;

        return $this;
    }

    /**
     * Gets to_country_code
     *
     * @return string
     */
    public function getToCountryCode()
    {
        return $this->container['to_country_code'];
    }

    /**
     * Sets to_country_code
     *
     * @param string $to_country_code to_country_code
     *
     * @return self
     */
    public function setToCountryCode($to_country_code)
    {
        $this->container['to_country_code'] = $to_country_code;

        return $this;
    }

    /**
     * Gets to_postal_code
     *
     * @return string
     */
    public function getToPostalCode()
    {
        return $this->container['to_postal_code'];
    }

    /**
     * Sets to_postal_code
     *
     * @param string $to_postal_code to_postal_code
     *
     * @return self
     */
    public function setToPostalCode($to_postal_code)
    {
        $this->container['to_postal_code'] = $to_postal_code;

        return $this;
    }

    /**
     * Gets to_city_locality
     *
     * @return string
     */
    public function getToCityLocality()
    {
        return $this->container['to_city_locality'];
    }

    /**
     * Sets to_city_locality
     *
     * @param string $to_city_locality The city locality the package is being shipped to
     *
     * @return self
     */
    public function setToCityLocality($to_city_locality)
    {

        if ((mb_strlen($to_city_locality) < 1)) {
            throw new \InvalidArgumentException('invalid length for $to_city_locality when calling EstimateRatesRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['to_city_locality'] = $to_city_locality;

        return $this;
    }

    /**
     * Gets to_state_province
     *
     * @return string
     */
    public function getToStateProvince()
    {
        return $this->container['to_state_province'];
    }

    /**
     * Sets to_state_province
     *
     * @param string $to_state_province To state province
     *
     * @return self
     */
    public function setToStateProvince($to_state_province)
    {

        if ((mb_strlen($to_state_province) < 1)) {
            throw new \InvalidArgumentException('invalid length for $to_state_province when calling EstimateRatesRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['to_state_province'] = $to_state_province;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return Weight
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param Weight $weight The weight of the package
     *
     * @return self
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets ship_date
     *
     * @return \DateTime
     */
    public function getShipDate()
    {
        return $this->container['ship_date'];
    }

    /**
     * Sets ship_date
     *
     * @param \DateTime $ship_date ship date
     *
     * @return self
     */
    public function setShipDate($ship_date)
    {
        $this->container['ship_date'] = $ship_date;

        return $this;
    }

    /**
     * Gets from_state_province
     *
     * @return string|null
     */
    public function getFromStateProvince()
    {
        return $this->container['from_state_province'];
    }

    /**
     * Sets from_state_province
     *
     * @param string|null $from_state_province From state province
     *
     * @return self
     */
    public function setFromStateProvince($from_state_province)
    {

        if (!is_null($from_state_province) && (mb_strlen($from_state_province) < 1)) {
            throw new \InvalidArgumentException('invalid length for $from_state_province when calling EstimateRatesRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['from_state_province'] = $from_state_province;

        return $this;
    }

    /**
     * Gets dimensions
     *
     * @return Dimensions|null
     */
    public function getDimensions()
    {
        return $this->container['dimensions'];
    }

    /**
     * Sets dimensions
     *
     * @param Dimensions|null $dimensions The dimensions of the package
     *
     * @return self
     */
    public function setDimensions($dimensions)
    {
        $this->container['dimensions'] = $dimensions;

        return $this;
    }

    /**
     * Gets confirmation
     *
     * @return DeliveryConfirmation|null
     */
    public function getConfirmation()
    {
        return $this->container['confirmation'];
    }

    /**
     * Sets confirmation
     *
     * @param DeliveryConfirmation|null $confirmation confirmation
     *
     * @return self
     */
    public function setConfirmation($confirmation)
    {
        $this->container['confirmation'] = $confirmation;

        return $this;
    }

    /**
     * Gets address_residential_indicator
     *
     * @return AddressResidentialIndicator|null
     */
    public function getAddressResidentialIndicator()
    {
        return $this->container['address_residential_indicator'];
    }

    /**
     * Sets address_residential_indicator
     *
     * @param AddressResidentialIndicator|null $address_residential_indicator address_residential_indicator
     *
     * @return self
     */
    public function setAddressResidentialIndicator($address_residential_indicator)
    {
        $this->container['address_residential_indicator'] = $address_residential_indicator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

