<?php
/**
 * ManifestsApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Nmusco\ShipEngine\v1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ShipEngine API
 *
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others.
 *
 * The version of the OpenAPI document: 1.1.202012041812
 * Contact: sales@shipengine.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nmusco\ShipEngine\v1\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Nmusco\ShipEngine\v1\ApiException;
use Nmusco\ShipEngine\v1\Configuration;
use Nmusco\ShipEngine\v1\HeaderSelector;
use Nmusco\ShipEngine\v1\ObjectSerializer;

/**
 * ManifestsApi Class Doc Comment
 *
 * @category Class
 * @package  Nmusco\ShipEngine\v1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ManifestsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createManifest
     *
     * Create Manifest
     *
     * @param  \Nmusco\ShipEngine\v1\Models\CreateManifestRequestBody $create_manifest_request_body create_manifest_request_body (required)
     *
     * @throws \Nmusco\ShipEngine\v1\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Nmusco\ShipEngine\v1\Models\CreateManifestResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody
     */
    public function createManifest($create_manifest_request_body)
    {
        list($response) = $this->createManifestWithHttpInfo($create_manifest_request_body);
        return $response;
    }

    /**
     * Operation createManifestWithHttpInfo
     *
     * Create Manifest
     *
     * @param  \Nmusco\ShipEngine\v1\Models\CreateManifestRequestBody $create_manifest_request_body (required)
     *
     * @throws \Nmusco\ShipEngine\v1\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Nmusco\ShipEngine\v1\Models\CreateManifestResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function createManifestWithHttpInfo($create_manifest_request_body)
    {
        $request = $this->createManifestRequest($create_manifest_request_body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Nmusco\ShipEngine\v1\Models\CreateManifestResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\CreateManifestResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Nmusco\ShipEngine\v1\Models\ErrorResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Nmusco\ShipEngine\v1\Models\ErrorResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nmusco\ShipEngine\v1\Models\CreateManifestResponseBody';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\CreateManifestResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createManifestAsync
     *
     * Create Manifest
     *
     * @param  \Nmusco\ShipEngine\v1\Models\CreateManifestRequestBody $create_manifest_request_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createManifestAsync($create_manifest_request_body)
    {
        return $this->createManifestAsyncWithHttpInfo($create_manifest_request_body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createManifestAsyncWithHttpInfo
     *
     * Create Manifest
     *
     * @param  \Nmusco\ShipEngine\v1\Models\CreateManifestRequestBody $create_manifest_request_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createManifestAsyncWithHttpInfo($create_manifest_request_body)
    {
        $returnType = '\Nmusco\ShipEngine\v1\Models\CreateManifestResponseBody';
        $request = $this->createManifestRequest($create_manifest_request_body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createManifest'
     *
     * @param  \Nmusco\ShipEngine\v1\Models\CreateManifestRequestBody $create_manifest_request_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createManifestRequest($create_manifest_request_body)
    {
        // verify the required parameter 'create_manifest_request_body' is set
        if ($create_manifest_request_body === null || (is_array($create_manifest_request_body) && count($create_manifest_request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_manifest_request_body when calling createManifest'
            );
        }

        $resourcePath = '/v1/manifests';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($create_manifest_request_body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_manifest_request_body));
            } else {
                $httpBody = $create_manifest_request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getManifestById
     *
     * Get Manifest By Id
     *
     * @param  string $manifest_id The Manifest Id (required)
     *
     * @throws \Nmusco\ShipEngine\v1\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Nmusco\ShipEngine\v1\Models\GetManifestByIdResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody
     */
    public function getManifestById($manifest_id)
    {
        list($response) = $this->getManifestByIdWithHttpInfo($manifest_id);
        return $response;
    }

    /**
     * Operation getManifestByIdWithHttpInfo
     *
     * Get Manifest By Id
     *
     * @param  string $manifest_id The Manifest Id (required)
     *
     * @throws \Nmusco\ShipEngine\v1\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Nmusco\ShipEngine\v1\Models\GetManifestByIdResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function getManifestByIdWithHttpInfo($manifest_id)
    {
        $request = $this->getManifestByIdRequest($manifest_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Nmusco\ShipEngine\v1\Models\GetManifestByIdResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\GetManifestByIdResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Nmusco\ShipEngine\v1\Models\ErrorResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Nmusco\ShipEngine\v1\Models\ErrorResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Nmusco\ShipEngine\v1\Models\ErrorResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nmusco\ShipEngine\v1\Models\GetManifestByIdResponseBody';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\GetManifestByIdResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getManifestByIdAsync
     *
     * Get Manifest By Id
     *
     * @param  string $manifest_id The Manifest Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getManifestByIdAsync($manifest_id)
    {
        return $this->getManifestByIdAsyncWithHttpInfo($manifest_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getManifestByIdAsyncWithHttpInfo
     *
     * Get Manifest By Id
     *
     * @param  string $manifest_id The Manifest Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getManifestByIdAsyncWithHttpInfo($manifest_id)
    {
        $returnType = '\Nmusco\ShipEngine\v1\Models\GetManifestByIdResponseBody';
        $request = $this->getManifestByIdRequest($manifest_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getManifestById'
     *
     * @param  string $manifest_id The Manifest Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getManifestByIdRequest($manifest_id)
    {
        // verify the required parameter 'manifest_id' is set
        if ($manifest_id === null || (is_array($manifest_id) && count($manifest_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $manifest_id when calling getManifestById'
            );
        }
        if (strlen($manifest_id) > 25) {
            throw new \InvalidArgumentException('invalid length for "$manifest_id" when calling ManifestsApi.getManifestById, must be smaller than or equal to 25.');
        }
        if (strlen($manifest_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$manifest_id" when calling ManifestsApi.getManifestById, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^se(-[a-z0-9]+)+$/", $manifest_id)) {
            throw new \InvalidArgumentException("invalid value for \"manifest_id\" when calling ManifestsApi.getManifestById, must conform to the pattern /^se(-[a-z0-9]+)+$/.");
        }


        $resourcePath = '/v1/manifests/{manifest_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($manifest_id !== null) {
            $resourcePath = str_replace(
                '{' . 'manifest_id' . '}',
                ObjectSerializer::toPathValue($manifest_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listManifests
     *
     * List Manifests
     *
     * @param  string $warehouse_id Warehouse ID (optional)
     * @param  \DateTime $ship_date_start ship date start range (optional)
     * @param  \DateTime $ship_date_end ship date end range (optional)
     * @param  \DateTime $created_at_start Used to create a filter for when a resource was created (ex. A shipment that was created after a certain time) (optional)
     * @param  \DateTime $created_at_end Used to create a filter for when a resource was created, (ex. A shipment that was created before a certain time) (optional)
     * @param  string $carrier_id Carrier ID (optional)
     * @param  int $page Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned. (optional, default to 1)
     * @param  int $page_size The number of results to return per response. (optional, default to 25)
     * @param  string[] $label_ids label_ids (optional)
     *
     * @throws \Nmusco\ShipEngine\v1\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Nmusco\ShipEngine\v1\Models\ListManifestsResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody
     */
    public function listManifests($warehouse_id = null, $ship_date_start = null, $ship_date_end = null, $created_at_start = null, $created_at_end = null, $carrier_id = null, $page = 1, $page_size = 25, $label_ids = null)
    {
        list($response) = $this->listManifestsWithHttpInfo($warehouse_id, $ship_date_start, $ship_date_end, $created_at_start, $created_at_end, $carrier_id, $page, $page_size, $label_ids);
        return $response;
    }

    /**
     * Operation listManifestsWithHttpInfo
     *
     * List Manifests
     *
     * @param  string $warehouse_id Warehouse ID (optional)
     * @param  \DateTime $ship_date_start ship date start range (optional)
     * @param  \DateTime $ship_date_end ship date end range (optional)
     * @param  \DateTime $created_at_start Used to create a filter for when a resource was created (ex. A shipment that was created after a certain time) (optional)
     * @param  \DateTime $created_at_end Used to create a filter for when a resource was created, (ex. A shipment that was created before a certain time) (optional)
     * @param  string $carrier_id Carrier ID (optional)
     * @param  int $page Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned. (optional, default to 1)
     * @param  int $page_size The number of results to return per response. (optional, default to 25)
     * @param  string[] $label_ids (optional)
     *
     * @throws \Nmusco\ShipEngine\v1\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Nmusco\ShipEngine\v1\Models\ListManifestsResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody|\Nmusco\ShipEngine\v1\Models\ErrorResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function listManifestsWithHttpInfo($warehouse_id = null, $ship_date_start = null, $ship_date_end = null, $created_at_start = null, $created_at_end = null, $carrier_id = null, $page = 1, $page_size = 25, $label_ids = null)
    {
        $request = $this->listManifestsRequest($warehouse_id, $ship_date_start, $ship_date_end, $created_at_start, $created_at_end, $carrier_id, $page, $page_size, $label_ids);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Nmusco\ShipEngine\v1\Models\ListManifestsResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\ListManifestsResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Nmusco\ShipEngine\v1\Models\ErrorResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Nmusco\ShipEngine\v1\Models\ErrorResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Nmusco\ShipEngine\v1\Models\ErrorResponseBody' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nmusco\ShipEngine\v1\Models\ListManifestsResponseBody';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\ListManifestsResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\ShipEngine\v1\Models\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listManifestsAsync
     *
     * List Manifests
     *
     * @param  string $warehouse_id Warehouse ID (optional)
     * @param  \DateTime $ship_date_start ship date start range (optional)
     * @param  \DateTime $ship_date_end ship date end range (optional)
     * @param  \DateTime $created_at_start Used to create a filter for when a resource was created (ex. A shipment that was created after a certain time) (optional)
     * @param  \DateTime $created_at_end Used to create a filter for when a resource was created, (ex. A shipment that was created before a certain time) (optional)
     * @param  string $carrier_id Carrier ID (optional)
     * @param  int $page Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned. (optional, default to 1)
     * @param  int $page_size The number of results to return per response. (optional, default to 25)
     * @param  string[] $label_ids (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listManifestsAsync($warehouse_id = null, $ship_date_start = null, $ship_date_end = null, $created_at_start = null, $created_at_end = null, $carrier_id = null, $page = 1, $page_size = 25, $label_ids = null)
    {
        return $this->listManifestsAsyncWithHttpInfo($warehouse_id, $ship_date_start, $ship_date_end, $created_at_start, $created_at_end, $carrier_id, $page, $page_size, $label_ids)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listManifestsAsyncWithHttpInfo
     *
     * List Manifests
     *
     * @param  string $warehouse_id Warehouse ID (optional)
     * @param  \DateTime $ship_date_start ship date start range (optional)
     * @param  \DateTime $ship_date_end ship date end range (optional)
     * @param  \DateTime $created_at_start Used to create a filter for when a resource was created (ex. A shipment that was created after a certain time) (optional)
     * @param  \DateTime $created_at_end Used to create a filter for when a resource was created, (ex. A shipment that was created before a certain time) (optional)
     * @param  string $carrier_id Carrier ID (optional)
     * @param  int $page Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned. (optional, default to 1)
     * @param  int $page_size The number of results to return per response. (optional, default to 25)
     * @param  string[] $label_ids (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listManifestsAsyncWithHttpInfo($warehouse_id = null, $ship_date_start = null, $ship_date_end = null, $created_at_start = null, $created_at_end = null, $carrier_id = null, $page = 1, $page_size = 25, $label_ids = null)
    {
        $returnType = '\Nmusco\ShipEngine\v1\Models\ListManifestsResponseBody';
        $request = $this->listManifestsRequest($warehouse_id, $ship_date_start, $ship_date_end, $created_at_start, $created_at_end, $carrier_id, $page, $page_size, $label_ids);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listManifests'
     *
     * @param  string $warehouse_id Warehouse ID (optional)
     * @param  \DateTime $ship_date_start ship date start range (optional)
     * @param  \DateTime $ship_date_end ship date end range (optional)
     * @param  \DateTime $created_at_start Used to create a filter for when a resource was created (ex. A shipment that was created after a certain time) (optional)
     * @param  \DateTime $created_at_end Used to create a filter for when a resource was created, (ex. A shipment that was created before a certain time) (optional)
     * @param  string $carrier_id Carrier ID (optional)
     * @param  int $page Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned. (optional, default to 1)
     * @param  int $page_size The number of results to return per response. (optional, default to 25)
     * @param  string[] $label_ids (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listManifestsRequest($warehouse_id = null, $ship_date_start = null, $ship_date_end = null, $created_at_start = null, $created_at_end = null, $carrier_id = null, $page = 1, $page_size = 25, $label_ids = null)
    {
        if ($warehouse_id !== null && strlen($warehouse_id) > 25) {
            throw new \InvalidArgumentException('invalid length for "$warehouse_id" when calling ManifestsApi.listManifests, must be smaller than or equal to 25.');
        }
        if ($warehouse_id !== null && strlen($warehouse_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$warehouse_id" when calling ManifestsApi.listManifests, must be bigger than or equal to 1.');
        }
        if ($warehouse_id !== null && !preg_match("/^se(-[a-z0-9]+)+$/", $warehouse_id)) {
            throw new \InvalidArgumentException("invalid value for \"warehouse_id\" when calling ManifestsApi.listManifests, must conform to the pattern /^se(-[a-z0-9]+)+$/.");
        }

        if ($carrier_id !== null && strlen($carrier_id) > 25) {
            throw new \InvalidArgumentException('invalid length for "$carrier_id" when calling ManifestsApi.listManifests, must be smaller than or equal to 25.');
        }
        if ($carrier_id !== null && strlen($carrier_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$carrier_id" when calling ManifestsApi.listManifests, must be bigger than or equal to 1.');
        }
        if ($carrier_id !== null && !preg_match("/^se(-[a-z0-9]+)+$/", $carrier_id)) {
            throw new \InvalidArgumentException("invalid value for \"carrier_id\" when calling ManifestsApi.listManifests, must conform to the pattern /^se(-[a-z0-9]+)+$/.");
        }

        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling ManifestsApi.listManifests, must be bigger than or equal to 1.');
        }

        if ($page_size !== null && $page_size < 1) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling ManifestsApi.listManifests, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v1/manifests';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($warehouse_id !== null) {
            if('form' === 'form' && is_array($warehouse_id)) {
                foreach($warehouse_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['warehouse_id'] = $warehouse_id;
            }
        }
        // query params
        if ($ship_date_start !== null) {
            if('form' === 'form' && is_array($ship_date_start)) {
                foreach($ship_date_start as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['ship_date_start'] = $ship_date_start;
            }
        }
        // query params
        if ($ship_date_end !== null) {
            if('form' === 'form' && is_array($ship_date_end)) {
                foreach($ship_date_end as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['ship_date_end'] = $ship_date_end;
            }
        }
        // query params
        if ($created_at_start !== null) {
            if('form' === 'form' && is_array($created_at_start)) {
                foreach($created_at_start as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['created_at_start'] = $created_at_start;
            }
        }
        // query params
        if ($created_at_end !== null) {
            if('form' === 'form' && is_array($created_at_end)) {
                foreach($created_at_end as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['created_at_end'] = $created_at_end;
            }
        }
        // query params
        if ($carrier_id !== null) {
            if('form' === 'form' && is_array($carrier_id)) {
                foreach($carrier_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['carrier_id'] = $carrier_id;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page_size'] = $page_size;
            }
        }
        // query params
        if ($label_ids !== null) {
            if('form' === 'form' && is_array($label_ids)) {
                foreach($label_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['label_ids'] = $label_ids;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('API-Key');
        if ($apiKey !== null) {
            $headers['API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
