<?php
/**
 * ConnectCarrierRequestBody
 *
 * PHP version 5
 *
 * @category Class
 * @package  Nmusco\ShipEngine\v1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ShipEngine API
 *
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others.
 *
 * The version of the OpenAPI document: 1.1.202012041812
 * Contact: sales@shipengine.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nmusco\ShipEngine\v1\Models;

use \ArrayAccess;
use \Nmusco\ShipEngine\v1\ObjectSerializer;

/**
 * ConnectCarrierRequestBody Class Doc Comment
 *
 * @category Class
 * @package  Nmusco\ShipEngine\v1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ConnectCarrierRequestBody implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'connect_carrier_request_body';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'nickname' => 'string',
        'username' => 'string',
        'password' => 'string',
        'merchant_seller_id' => 'string',
        'mws_auth_token' => 'string',
        'email' => 'string',
        'auth_code' => 'string',
        'account_number' => 'string',
        'ftp_username' => 'string',
        'ftp_password' => 'string',
        'api_key' => 'string',
        'api_secret' => 'string',
        'contract_id' => 'string',
        'client_id' => 'string',
        'pickup_number' => 'string',
        'distribution_center' => 'string',
        'site_id' => 'string',
        'account' => 'string',
        'passphrase' => 'string',
        'address1' => 'string',
        'city' => 'string',
        'company' => 'string',
        'country_code' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'phone' => 'string',
        'postal_code' => 'string',
        'state' => 'string',
        'agree_to_eula' => 'bool',
        'mailer_id' => 'int',
        'induction_site' => 'string',
        'activation_key' => 'string',
        'contact_name' => 'string',
        'access_key' => 'string',
        'sendle_id' => 'string',
        'account_country_code' => 'string',
        'account_postal_code' => 'string',
        'agree_to_technology_agreement' => 'bool',
        'ancillary_endorsement' => '\Nmusco\ShipEngine\v1\Models\AncillaryServiceEndorsement',
        'address2' => 'string',
        'meter_number' => 'string',
        'profile_name' => 'string',
        'merchant_id' => 'int',
        'oba_email' => 'string',
        'company_name' => 'string',
        'street_line1' => 'string',
        'street_line2' => 'string',
        'street_line3' => 'string',
        'title' => 'string',
        'invoice' => '\Nmusco\ShipEngine\v1\Models\UpsInvoice'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'nickname' => null,
        'username' => null,
        'password' => null,
        'merchant_seller_id' => null,
        'mws_auth_token' => null,
        'email' => null,
        'auth_code' => null,
        'account_number' => null,
        'ftp_username' => null,
        'ftp_password' => null,
        'api_key' => null,
        'api_secret' => null,
        'contract_id' => null,
        'client_id' => null,
        'pickup_number' => null,
        'distribution_center' => null,
        'site_id' => null,
        'account' => null,
        'passphrase' => null,
        'address1' => null,
        'city' => null,
        'company' => null,
        'country_code' => null,
        'first_name' => null,
        'last_name' => null,
        'phone' => null,
        'postal_code' => null,
        'state' => null,
        'agree_to_eula' => null,
        'mailer_id' => 'int32',
        'induction_site' => null,
        'activation_key' => null,
        'contact_name' => null,
        'access_key' => null,
        'sendle_id' => null,
        'account_country_code' => null,
        'account_postal_code' => null,
        'agree_to_technology_agreement' => null,
        'ancillary_endorsement' => null,
        'address2' => null,
        'meter_number' => null,
        'profile_name' => null,
        'merchant_id' => 'int32',
        'oba_email' => null,
        'company_name' => null,
        'street_line1' => null,
        'street_line2' => null,
        'street_line3' => null,
        'title' => null,
        'invoice' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'nickname' => 'nickname',
        'username' => 'username',
        'password' => 'password',
        'merchant_seller_id' => 'merchant_seller_id',
        'mws_auth_token' => 'mws_auth_token',
        'email' => 'email',
        'auth_code' => 'auth_code',
        'account_number' => 'account_number',
        'ftp_username' => 'ftp_username',
        'ftp_password' => 'ftp_password',
        'api_key' => 'api_key',
        'api_secret' => 'api_secret',
        'contract_id' => 'contract_id',
        'client_id' => 'client_id',
        'pickup_number' => 'pickup_number',
        'distribution_center' => 'distribution_center',
        'site_id' => 'site_id',
        'account' => 'account',
        'passphrase' => 'passphrase',
        'address1' => 'address1',
        'city' => 'city',
        'company' => 'company',
        'country_code' => 'country_code',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'phone' => 'phone',
        'postal_code' => 'postal_code',
        'state' => 'state',
        'agree_to_eula' => 'agree_to_eula',
        'mailer_id' => 'mailer_id',
        'induction_site' => 'induction_site',
        'activation_key' => 'activation_key',
        'contact_name' => 'contact_name',
        'access_key' => 'access_key',
        'sendle_id' => 'sendle_id',
        'account_country_code' => 'account_country_code',
        'account_postal_code' => 'account_postal_code',
        'agree_to_technology_agreement' => 'agree_to_technology_agreement',
        'ancillary_endorsement' => 'ancillary_endorsement',
        'address2' => 'address2',
        'meter_number' => 'meter_number',
        'profile_name' => 'profile_name',
        'merchant_id' => 'merchant_id',
        'oba_email' => 'oba_email',
        'company_name' => 'company_name',
        'street_line1' => 'street_line1',
        'street_line2' => 'street_line2',
        'street_line3' => 'street_line3',
        'title' => 'title',
        'invoice' => 'invoice'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'nickname' => 'setNickname',
        'username' => 'setUsername',
        'password' => 'setPassword',
        'merchant_seller_id' => 'setMerchantSellerId',
        'mws_auth_token' => 'setMwsAuthToken',
        'email' => 'setEmail',
        'auth_code' => 'setAuthCode',
        'account_number' => 'setAccountNumber',
        'ftp_username' => 'setFtpUsername',
        'ftp_password' => 'setFtpPassword',
        'api_key' => 'setApiKey',
        'api_secret' => 'setApiSecret',
        'contract_id' => 'setContractId',
        'client_id' => 'setClientId',
        'pickup_number' => 'setPickupNumber',
        'distribution_center' => 'setDistributionCenter',
        'site_id' => 'setSiteId',
        'account' => 'setAccount',
        'passphrase' => 'setPassphrase',
        'address1' => 'setAddress1',
        'city' => 'setCity',
        'company' => 'setCompany',
        'country_code' => 'setCountryCode',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'phone' => 'setPhone',
        'postal_code' => 'setPostalCode',
        'state' => 'setState',
        'agree_to_eula' => 'setAgreeToEula',
        'mailer_id' => 'setMailerId',
        'induction_site' => 'setInductionSite',
        'activation_key' => 'setActivationKey',
        'contact_name' => 'setContactName',
        'access_key' => 'setAccessKey',
        'sendle_id' => 'setSendleId',
        'account_country_code' => 'setAccountCountryCode',
        'account_postal_code' => 'setAccountPostalCode',
        'agree_to_technology_agreement' => 'setAgreeToTechnologyAgreement',
        'ancillary_endorsement' => 'setAncillaryEndorsement',
        'address2' => 'setAddress2',
        'meter_number' => 'setMeterNumber',
        'profile_name' => 'setProfileName',
        'merchant_id' => 'setMerchantId',
        'oba_email' => 'setObaEmail',
        'company_name' => 'setCompanyName',
        'street_line1' => 'setStreetLine1',
        'street_line2' => 'setStreetLine2',
        'street_line3' => 'setStreetLine3',
        'title' => 'setTitle',
        'invoice' => 'setInvoice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'nickname' => 'getNickname',
        'username' => 'getUsername',
        'password' => 'getPassword',
        'merchant_seller_id' => 'getMerchantSellerId',
        'mws_auth_token' => 'getMwsAuthToken',
        'email' => 'getEmail',
        'auth_code' => 'getAuthCode',
        'account_number' => 'getAccountNumber',
        'ftp_username' => 'getFtpUsername',
        'ftp_password' => 'getFtpPassword',
        'api_key' => 'getApiKey',
        'api_secret' => 'getApiSecret',
        'contract_id' => 'getContractId',
        'client_id' => 'getClientId',
        'pickup_number' => 'getPickupNumber',
        'distribution_center' => 'getDistributionCenter',
        'site_id' => 'getSiteId',
        'account' => 'getAccount',
        'passphrase' => 'getPassphrase',
        'address1' => 'getAddress1',
        'city' => 'getCity',
        'company' => 'getCompany',
        'country_code' => 'getCountryCode',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'phone' => 'getPhone',
        'postal_code' => 'getPostalCode',
        'state' => 'getState',
        'agree_to_eula' => 'getAgreeToEula',
        'mailer_id' => 'getMailerId',
        'induction_site' => 'getInductionSite',
        'activation_key' => 'getActivationKey',
        'contact_name' => 'getContactName',
        'access_key' => 'getAccessKey',
        'sendle_id' => 'getSendleId',
        'account_country_code' => 'getAccountCountryCode',
        'account_postal_code' => 'getAccountPostalCode',
        'agree_to_technology_agreement' => 'getAgreeToTechnologyAgreement',
        'ancillary_endorsement' => 'getAncillaryEndorsement',
        'address2' => 'getAddress2',
        'meter_number' => 'getMeterNumber',
        'profile_name' => 'getProfileName',
        'merchant_id' => 'getMerchantId',
        'oba_email' => 'getObaEmail',
        'company_name' => 'getCompanyName',
        'street_line1' => 'getStreetLine1',
        'street_line2' => 'getStreetLine2',
        'street_line3' => 'getStreetLine3',
        'title' => 'getTitle',
        'invoice' => 'getInvoice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['nickname'] = $data['nickname'] ?? null;
        $this->container['username'] = $data['username'] ?? null;
        $this->container['password'] = $data['password'] ?? null;
        $this->container['merchant_seller_id'] = $data['merchant_seller_id'] ?? null;
        $this->container['mws_auth_token'] = $data['mws_auth_token'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['auth_code'] = $data['auth_code'] ?? null;
        $this->container['account_number'] = $data['account_number'] ?? null;
        $this->container['ftp_username'] = $data['ftp_username'] ?? null;
        $this->container['ftp_password'] = $data['ftp_password'] ?? null;
        $this->container['api_key'] = $data['api_key'] ?? null;
        $this->container['api_secret'] = $data['api_secret'] ?? null;
        $this->container['contract_id'] = $data['contract_id'] ?? null;
        $this->container['client_id'] = $data['client_id'] ?? null;
        $this->container['pickup_number'] = $data['pickup_number'] ?? null;
        $this->container['distribution_center'] = $data['distribution_center'] ?? null;
        $this->container['site_id'] = $data['site_id'] ?? null;
        $this->container['account'] = $data['account'] ?? null;
        $this->container['passphrase'] = $data['passphrase'] ?? null;
        $this->container['address1'] = $data['address1'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['company'] = $data['company'] ?? null;
        $this->container['country_code'] = $data['country_code'] ?? null;
        $this->container['first_name'] = $data['first_name'] ?? null;
        $this->container['last_name'] = $data['last_name'] ?? null;
        $this->container['phone'] = $data['phone'] ?? null;
        $this->container['postal_code'] = $data['postal_code'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['agree_to_eula'] = $data['agree_to_eula'] ?? null;
        $this->container['mailer_id'] = $data['mailer_id'] ?? null;
        $this->container['induction_site'] = $data['induction_site'] ?? null;
        $this->container['activation_key'] = $data['activation_key'] ?? null;
        $this->container['contact_name'] = $data['contact_name'] ?? null;
        $this->container['access_key'] = $data['access_key'] ?? null;
        $this->container['sendle_id'] = $data['sendle_id'] ?? null;
        $this->container['account_country_code'] = $data['account_country_code'] ?? null;
        $this->container['account_postal_code'] = $data['account_postal_code'] ?? null;
        $this->container['agree_to_technology_agreement'] = $data['agree_to_technology_agreement'] ?? null;
        $this->container['ancillary_endorsement'] = $data['ancillary_endorsement'] ?? null;
        $this->container['address2'] = $data['address2'] ?? null;
        $this->container['meter_number'] = $data['meter_number'] ?? null;
        $this->container['profile_name'] = $data['profile_name'] ?? null;
        $this->container['merchant_id'] = $data['merchant_id'] ?? null;
        $this->container['oba_email'] = $data['oba_email'] ?? null;
        $this->container['company_name'] = $data['company_name'] ?? null;
        $this->container['street_line1'] = $data['street_line1'] ?? null;
        $this->container['street_line2'] = $data['street_line2'] ?? null;
        $this->container['street_line3'] = $data['street_line3'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['invoice'] = $data['invoice'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['nickname'] === null) {
            $invalidProperties[] = "'nickname' can't be null";
        }
        if ((mb_strlen($this->container['nickname']) < 1)) {
            $invalidProperties[] = "invalid value for 'nickname', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['username'] === null) {
            $invalidProperties[] = "'username' can't be null";
        }
        if ((mb_strlen($this->container['username']) < 1)) {
            $invalidProperties[] = "invalid value for 'username', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['password'] === null) {
            $invalidProperties[] = "'password' can't be null";
        }
        if ((mb_strlen($this->container['password']) < 1)) {
            $invalidProperties[] = "invalid value for 'password', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['merchant_seller_id'] === null) {
            $invalidProperties[] = "'merchant_seller_id' can't be null";
        }
        if ((mb_strlen($this->container['merchant_seller_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'merchant_seller_id', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['mws_auth_token'] === null) {
            $invalidProperties[] = "'mws_auth_token' can't be null";
        }
        if ((mb_strlen($this->container['mws_auth_token']) < 1)) {
            $invalidProperties[] = "invalid value for 'mws_auth_token', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['auth_code'] === null) {
            $invalidProperties[] = "'auth_code' can't be null";
        }
        if ((mb_strlen($this->container['auth_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'auth_code', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['account_number'] === null) {
            $invalidProperties[] = "'account_number' can't be null";
        }
        if ((mb_strlen($this->container['account_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'account_number', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['ftp_username'] === null) {
            $invalidProperties[] = "'ftp_username' can't be null";
        }
        if ((mb_strlen($this->container['ftp_username']) < 1)) {
            $invalidProperties[] = "invalid value for 'ftp_username', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['ftp_password'] === null) {
            $invalidProperties[] = "'ftp_password' can't be null";
        }
        if ((mb_strlen($this->container['ftp_password']) < 1)) {
            $invalidProperties[] = "invalid value for 'ftp_password', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['api_key'] === null) {
            $invalidProperties[] = "'api_key' can't be null";
        }
        if ((mb_strlen($this->container['api_key']) < 1)) {
            $invalidProperties[] = "invalid value for 'api_key', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['api_secret'] === null) {
            $invalidProperties[] = "'api_secret' can't be null";
        }
        if ((mb_strlen($this->container['api_secret']) < 1)) {
            $invalidProperties[] = "invalid value for 'api_secret', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['contract_id'] === null) {
            $invalidProperties[] = "'contract_id' can't be null";
        }
        if ((mb_strlen($this->container['contract_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'contract_id', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['client_id'] === null) {
            $invalidProperties[] = "'client_id' can't be null";
        }
        if ((mb_strlen($this->container['client_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'client_id', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['pickup_number'] === null) {
            $invalidProperties[] = "'pickup_number' can't be null";
        }
        if ((mb_strlen($this->container['pickup_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'pickup_number', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['distribution_center'] === null) {
            $invalidProperties[] = "'distribution_center' can't be null";
        }
        if ((mb_strlen($this->container['distribution_center']) < 1)) {
            $invalidProperties[] = "invalid value for 'distribution_center', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['site_id'] === null) {
            $invalidProperties[] = "'site_id' can't be null";
        }
        if ($this->container['account'] === null) {
            $invalidProperties[] = "'account' can't be null";
        }
        if ((mb_strlen($this->container['account']) < 1)) {
            $invalidProperties[] = "invalid value for 'account', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['passphrase'] === null) {
            $invalidProperties[] = "'passphrase' can't be null";
        }
        if ((mb_strlen($this->container['passphrase']) < 1)) {
            $invalidProperties[] = "invalid value for 'passphrase', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['address1'] === null) {
            $invalidProperties[] = "'address1' can't be null";
        }
        if ((mb_strlen($this->container['address1']) < 1)) {
            $invalidProperties[] = "invalid value for 'address1', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ((mb_strlen($this->container['city']) < 1)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['company'] === null) {
            $invalidProperties[] = "'company' can't be null";
        }
        if ((mb_strlen($this->container['company']) < 1)) {
            $invalidProperties[] = "invalid value for 'company', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['country_code'] === null) {
            $invalidProperties[] = "'country_code' can't be null";
        }
        if ((mb_strlen($this->container['country_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'country_code', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ((mb_strlen($this->container['first_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        if ((mb_strlen($this->container['last_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['phone'] === null) {
            $invalidProperties[] = "'phone' can't be null";
        }
        if ((mb_strlen($this->container['phone']) < 1)) {
            $invalidProperties[] = "invalid value for 'phone', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['postal_code'] === null) {
            $invalidProperties[] = "'postal_code' can't be null";
        }
        if ((mb_strlen($this->container['postal_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        if ((mb_strlen($this->container['state']) < 1)) {
            $invalidProperties[] = "invalid value for 'state', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['agree_to_eula'] === null) {
            $invalidProperties[] = "'agree_to_eula' can't be null";
        }
        if ($this->container['mailer_id'] === null) {
            $invalidProperties[] = "'mailer_id' can't be null";
        }
        if (($this->container['mailer_id'] < 0)) {
            $invalidProperties[] = "invalid value for 'mailer_id', must be bigger than or equal to 0.";
        }

        if ($this->container['induction_site'] === null) {
            $invalidProperties[] = "'induction_site' can't be null";
        }
        if ((mb_strlen($this->container['induction_site']) < 1)) {
            $invalidProperties[] = "invalid value for 'induction_site', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['activation_key'] === null) {
            $invalidProperties[] = "'activation_key' can't be null";
        }
        if ((mb_strlen($this->container['activation_key']) < 1)) {
            $invalidProperties[] = "invalid value for 'activation_key', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['contact_name'] === null) {
            $invalidProperties[] = "'contact_name' can't be null";
        }
        if ((mb_strlen($this->container['contact_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'contact_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['access_key'] === null) {
            $invalidProperties[] = "'access_key' can't be null";
        }
        if ((mb_strlen($this->container['access_key']) < 1)) {
            $invalidProperties[] = "invalid value for 'access_key', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['sendle_id'] === null) {
            $invalidProperties[] = "'sendle_id' can't be null";
        }
        if ($this->container['account_country_code'] === null) {
            $invalidProperties[] = "'account_country_code' can't be null";
        }
        if ((mb_strlen($this->container['account_country_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'account_country_code', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['account_postal_code'] === null) {
            $invalidProperties[] = "'account_postal_code' can't be null";
        }
        if ((mb_strlen($this->container['account_postal_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'account_postal_code', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['agree_to_technology_agreement'] === null) {
            $invalidProperties[] = "'agree_to_technology_agreement' can't be null";
        }
        if (!is_null($this->container['address2']) && (mb_strlen($this->container['address2']) < 1)) {
            $invalidProperties[] = "invalid value for 'address2', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['meter_number']) && (mb_strlen($this->container['meter_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'meter_number', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['profile_name']) && (mb_strlen($this->container['profile_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'profile_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['merchant_id']) && ($this->container['merchant_id'] < 0)) {
            $invalidProperties[] = "invalid value for 'merchant_id', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['company_name']) && (mb_strlen($this->container['company_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'company_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['street_line1']) && (mb_strlen($this->container['street_line1']) < 1)) {
            $invalidProperties[] = "invalid value for 'street_line1', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['street_line2']) && (mb_strlen($this->container['street_line2']) < 1)) {
            $invalidProperties[] = "invalid value for 'street_line2', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['street_line3']) && (mb_strlen($this->container['street_line3']) < 1)) {
            $invalidProperties[] = "invalid value for 'street_line3', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['title']) && (mb_strlen($this->container['title']) < 1)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets nickname
     *
     * @return string
     */
    public function getNickname()
    {
        return $this->container['nickname'];
    }

    /**
     * Sets nickname
     *
     * @param string $nickname Nickname
     *
     * @return self
     */
    public function setNickname($nickname)
    {

        if ((mb_strlen($nickname) < 1)) {
            throw new \InvalidArgumentException('invalid length for $nickname when calling ConnectCarrierRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['nickname'] = $nickname;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username Username
     *
     * @return self
     */
    public function setUsername($username)
    {

        if ((mb_strlen($username) < 1)) {
            throw new \InvalidArgumentException('invalid length for $username when calling ConnectCarrierRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password Password
     *
     * @return self
     */
    public function setPassword($password)
    {

        if ((mb_strlen($password) < 1)) {
            throw new \InvalidArgumentException('invalid length for $password when calling ConnectCarrierRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets merchant_seller_id
     *
     * @return string
     */
    public function getMerchantSellerId()
    {
        return $this->container['merchant_seller_id'];
    }

    /**
     * Sets merchant_seller_id
     *
     * @param string $merchant_seller_id merchant_seller_id
     *
     * @return self
     */
    public function setMerchantSellerId($merchant_seller_id)
    {

        if ((mb_strlen($merchant_seller_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $merchant_seller_id when calling ConnectCarrierRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['merchant_seller_id'] = $merchant_seller_id;

        return $this;
    }

    /**
     * Gets mws_auth_token
     *
     * @return string
     */
    public function getMwsAuthToken()
    {
        return $this->container['mws_auth_token'];
    }

    /**
     * Sets mws_auth_token
     *
     * @param string $mws_auth_token mws_auth_token
     *
     * @return self
     */
    public function setMwsAuthToken($mws_auth_token)
    {

        if ((mb_strlen($mws_auth_token) < 1)) {
            throw new \InvalidArgumentException('invalid length for $mws_auth_token when calling ConnectCarrierRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['mws_auth_token'] = $mws_auth_token;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email The email address
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets auth_code
     *
     * @return string
     */
    public function getAuthCode()
    {
        return $this->container['auth_code'];
    }

    /**
     * Sets auth_code
     *
     * @param string $auth_code Amazon UK Shipping auth code.
     *
     * @return self
     */
    public function setAuthCode($auth_code)
    {

        if ((mb_strlen($auth_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $auth_code when calling ConnectCarrierRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['auth_code'] = $auth_code;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string $account_number Account number
     *
     * @return self
     */
    public function setAccountNumber($account_number)
    {

        if ((mb_strlen($account_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $account_number when calling ConnectCarrierRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets ftp_username
     *
     * @return string
     */
    public function getFtpUsername()
    {
        return $this->container['ftp_username'];
    }

    /**
     * Sets ftp_username
     *
     * @param string $ftp_username FTP username
     *
     * @return self
     */
    public function setFtpUsername($ftp_username)
    {

        if ((mb_strlen($ftp_username) < 1)) {
            throw new \InvalidArgumentException('invalid length for $ftp_username when calling ConnectCarrierRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['ftp_username'] = $ftp_username;

        return $this;
    }

    /**
     * Gets ftp_password
     *
     * @return string
     */
    public function getFtpPassword()
    {
        return $this->container['ftp_password'];
    }

    /**
     * Sets ftp_password
     *
     * @param string $ftp_password FTP password
     *
     * @return self
     */
    public function setFtpPassword($ftp_password)
    {

        if ((mb_strlen($ftp_password) < 1)) {
            throw new \InvalidArgumentException('invalid length for $ftp_password when calling ConnectCarrierRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['ftp_password'] = $ftp_password;

        return $this;
    }

    /**
     * Gets api_key
     *
     * @return string
     */
    public function getApiKey()
    {
        return $this->container['api_key'];
    }

    /**
     * Sets api_key
     *
     * @param string $api_key API key
     *
     * @return self
     */
    public function setApiKey($api_key)
    {

        if ((mb_strlen($api_key) < 1)) {
            throw new \InvalidArgumentException('invalid length for $api_key when calling ConnectCarrierRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['api_key'] = $api_key;

        return $this;
    }

    /**
     * Gets api_secret
     *
     * @return string
     */
    public function getApiSecret()
    {
        return $this->container['api_secret'];
    }

    /**
     * Sets api_secret
     *
     * @param string $api_secret The DHL E-Commerce API secret. This field is optional, but if not set you will not be able to get rates for this account.
     *
     * @return self
     */
    public function setApiSecret($api_secret)
    {

        if ((mb_strlen($api_secret) < 1)) {
            throw new \InvalidArgumentException('invalid length for $api_secret when calling ConnectCarrierRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['api_secret'] = $api_secret;

        return $this;
    }

    /**
     * Gets contract_id
     *
     * @return string
     */
    public function getContractId()
    {
        return $this->container['contract_id'];
    }

    /**
     * Sets contract_id
     *
     * @param string $contract_id Canada Post Account Contract ID
     *
     * @return self
     */
    public function setContractId($contract_id)
    {

        if ((mb_strlen($contract_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $contract_id when calling ConnectCarrierRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['contract_id'] = $contract_id;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string $client_id The client id
     *
     * @return self
     */
    public function setClientId($client_id)
    {

        if ((mb_strlen($client_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $client_id when calling ConnectCarrierRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets pickup_number
     *
     * @return string
     */
    public function getPickupNumber()
    {
        return $this->container['pickup_number'];
    }

    /**
     * Sets pickup_number
     *
     * @param string $pickup_number The pickup number
     *
     * @return self
     */
    public function setPickupNumber($pickup_number)
    {

        if ((mb_strlen($pickup_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $pickup_number when calling ConnectCarrierRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['pickup_number'] = $pickup_number;

        return $this;
    }

    /**
     * Gets distribution_center
     *
     * @return string
     */
    public function getDistributionCenter()
    {
        return $this->container['distribution_center'];
    }

    /**
     * Sets distribution_center
     *
     * @param string $distribution_center The distribution center
     *
     * @return self
     */
    public function setDistributionCenter($distribution_center)
    {

        if ((mb_strlen($distribution_center) < 1)) {
            throw new \InvalidArgumentException('invalid length for $distribution_center when calling ConnectCarrierRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['distribution_center'] = $distribution_center;

        return $this;
    }

    /**
     * Gets site_id
     *
     * @return string
     */
    public function getSiteId()
    {
        return $this->container['site_id'];
    }

    /**
     * Sets site_id
     *
     * @param string $site_id A string that uniquely identifies the site
     *
     * @return self
     */
    public function setSiteId($site_id)
    {
        $this->container['site_id'] = $site_id;

        return $this;
    }

    /**
     * Gets account
     *
     * @return string
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param string $account Account
     *
     * @return self
     */
    public function setAccount($account)
    {

        if ((mb_strlen($account) < 1)) {
            throw new \InvalidArgumentException('invalid length for $account when calling ConnectCarrierRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets passphrase
     *
     * @return string
     */
    public function getPassphrase()
    {
        return $this->container['passphrase'];
    }

    /**
     * Sets passphrase
     *
     * @param string $passphrase Passphrase
     *
     * @return self
     */
    public function setPassphrase($passphrase)
    {

        if ((mb_strlen($passphrase) < 1)) {
            throw new \InvalidArgumentException('invalid length for $passphrase when calling ConnectCarrierRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['passphrase'] = $passphrase;

        return $this;
    }

    /**
     * Gets address1
     *
     * @return string
     */
    public function getAddress1()
    {
        return $this->container['address1'];
    }

    /**
     * Sets address1
     *
     * @param string $address1 Address Line 1
     *
     * @return self
     */
    public function setAddress1($address1)
    {

        if ((mb_strlen($address1) < 1)) {
            throw new \InvalidArgumentException('invalid length for $address1 when calling ConnectCarrierRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['address1'] = $address1;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city City
     *
     * @return self
     */
    public function setCity($city)
    {

        if ((mb_strlen($city) < 1)) {
            throw new \InvalidArgumentException('invalid length for $city when calling ConnectCarrierRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string $company Company
     *
     * @return self
     */
    public function setCompany($company)
    {

        if ((mb_strlen($company) < 1)) {
            throw new \InvalidArgumentException('invalid length for $company when calling ConnectCarrierRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code Country code
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {

        if ((mb_strlen($country_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $country_code when calling ConnectCarrierRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name First name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {

        if ((mb_strlen($first_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling ConnectCarrierRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name Last name
     *
     * @return self
     */
    public function setLastName($last_name)
    {

        if ((mb_strlen($last_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling ConnectCarrierRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone Phone
     *
     * @return self
     */
    public function setPhone($phone)
    {

        if ((mb_strlen($phone) < 1)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling ConnectCarrierRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string $postal_code Postal code
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {

        if ((mb_strlen($postal_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling ConnectCarrierRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state State
     *
     * @return self
     */
    public function setState($state)
    {

        if ((mb_strlen($state) < 1)) {
            throw new \InvalidArgumentException('invalid length for $state when calling ConnectCarrierRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets agree_to_eula
     *
     * @return bool
     */
    public function getAgreeToEula()
    {
        return $this->container['agree_to_eula'];
    }

    /**
     * Sets agree_to_eula
     *
     * @param bool $agree_to_eula Boolean signaling agreement to the Fedex End User License Agreement
     *
     * @return self
     */
    public function setAgreeToEula($agree_to_eula)
    {
        $this->container['agree_to_eula'] = $agree_to_eula;

        return $this;
    }

    /**
     * Gets mailer_id
     *
     * @return int
     */
    public function getMailerId()
    {
        return $this->container['mailer_id'];
    }

    /**
     * Sets mailer_id
     *
     * @param int $mailer_id Mailer id
     *
     * @return self
     */
    public function setMailerId($mailer_id)
    {

        if (($mailer_id < 0)) {
            throw new \InvalidArgumentException('invalid value for $mailer_id when calling ConnectCarrierRequestBody., must be bigger than or equal to 0.');
        }

        $this->container['mailer_id'] = $mailer_id;

        return $this;
    }

    /**
     * Gets induction_site
     *
     * @return string
     */
    public function getInductionSite()
    {
        return $this->container['induction_site'];
    }

    /**
     * Sets induction_site
     *
     * @param string $induction_site Induction site
     *
     * @return self
     */
    public function setInductionSite($induction_site)
    {

        if ((mb_strlen($induction_site) < 1)) {
            throw new \InvalidArgumentException('invalid length for $induction_site when calling ConnectCarrierRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['induction_site'] = $induction_site;

        return $this;
    }

    /**
     * Gets activation_key
     *
     * @return string
     */
    public function getActivationKey()
    {
        return $this->container['activation_key'];
    }

    /**
     * Sets activation_key
     *
     * @param string $activation_key Activation key
     *
     * @return self
     */
    public function setActivationKey($activation_key)
    {

        if ((mb_strlen($activation_key) < 1)) {
            throw new \InvalidArgumentException('invalid length for $activation_key when calling ConnectCarrierRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['activation_key'] = $activation_key;

        return $this;
    }

    /**
     * Gets contact_name
     *
     * @return string
     */
    public function getContactName()
    {
        return $this->container['contact_name'];
    }

    /**
     * Sets contact_name
     *
     * @param string $contact_name Contact name
     *
     * @return self
     */
    public function setContactName($contact_name)
    {

        if ((mb_strlen($contact_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $contact_name when calling ConnectCarrierRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['contact_name'] = $contact_name;

        return $this;
    }

    /**
     * Gets access_key
     *
     * @return string
     */
    public function getAccessKey()
    {
        return $this->container['access_key'];
    }

    /**
     * Sets access_key
     *
     * @param string $access_key Seko Account Access Key
     *
     * @return self
     */
    public function setAccessKey($access_key)
    {

        if ((mb_strlen($access_key) < 1)) {
            throw new \InvalidArgumentException('invalid length for $access_key when calling ConnectCarrierRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['access_key'] = $access_key;

        return $this;
    }

    /**
     * Gets sendle_id
     *
     * @return string
     */
    public function getSendleId()
    {
        return $this->container['sendle_id'];
    }

    /**
     * Sets sendle_id
     *
     * @param string $sendle_id A string that uniquely identifies the sendle
     *
     * @return self
     */
    public function setSendleId($sendle_id)
    {
        $this->container['sendle_id'] = $sendle_id;

        return $this;
    }

    /**
     * Gets account_country_code
     *
     * @return string
     */
    public function getAccountCountryCode()
    {
        return $this->container['account_country_code'];
    }

    /**
     * Sets account_country_code
     *
     * @param string $account_country_code Account country code
     *
     * @return self
     */
    public function setAccountCountryCode($account_country_code)
    {

        if ((mb_strlen($account_country_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $account_country_code when calling ConnectCarrierRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['account_country_code'] = $account_country_code;

        return $this;
    }

    /**
     * Gets account_postal_code
     *
     * @return string
     */
    public function getAccountPostalCode()
    {
        return $this->container['account_postal_code'];
    }

    /**
     * Sets account_postal_code
     *
     * @param string $account_postal_code Account postal code
     *
     * @return self
     */
    public function setAccountPostalCode($account_postal_code)
    {

        if ((mb_strlen($account_postal_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $account_postal_code when calling ConnectCarrierRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['account_postal_code'] = $account_postal_code;

        return $this;
    }

    /**
     * Gets agree_to_technology_agreement
     *
     * @return bool
     */
    public function getAgreeToTechnologyAgreement()
    {
        return $this->container['agree_to_technology_agreement'];
    }

    /**
     * Sets agree_to_technology_agreement
     *
     * @param bool $agree_to_technology_agreement The Agreement to the [UPS Technology Agreement](https://www.ups.com/assets/resources/media/UTA_with_EUR.pdf)
     *
     * @return self
     */
    public function setAgreeToTechnologyAgreement($agree_to_technology_agreement)
    {
        $this->container['agree_to_technology_agreement'] = $agree_to_technology_agreement;

        return $this;
    }

    /**
     * Gets ancillary_endorsement
     *
     * @return AncillaryServiceEndorsement|null
     */
    public function getAncillaryEndorsement()
    {
        return $this->container['ancillary_endorsement'];
    }

    /**
     * Sets ancillary_endorsement
     *
     * @param AncillaryServiceEndorsement|null $ancillary_endorsement ancillary_endorsement
     *
     * @return self
     */
    public function setAncillaryEndorsement($ancillary_endorsement)
    {
        $this->container['ancillary_endorsement'] = $ancillary_endorsement;

        return $this;
    }

    /**
     * Gets address2
     *
     * @return string|null
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     *
     * @param string|null $address2 Address Line 2
     *
     * @return self
     */
    public function setAddress2($address2)
    {

        if (!is_null($address2) && (mb_strlen($address2) < 1)) {
            throw new \InvalidArgumentException('invalid length for $address2 when calling ConnectCarrierRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets meter_number
     *
     * @return string|null
     */
    public function getMeterNumber()
    {
        return $this->container['meter_number'];
    }

    /**
     * Sets meter_number
     *
     * @param string|null $meter_number Meter number
     *
     * @return self
     */
    public function setMeterNumber($meter_number)
    {

        if (!is_null($meter_number) && (mb_strlen($meter_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $meter_number when calling ConnectCarrierRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['meter_number'] = $meter_number;

        return $this;
    }

    /**
     * Gets profile_name
     *
     * @return string|null
     */
    public function getProfileName()
    {
        return $this->container['profile_name'];
    }

    /**
     * Sets profile_name
     *
     * @param string|null $profile_name Profile name
     *
     * @return self
     */
    public function setProfileName($profile_name)
    {

        if (!is_null($profile_name) && (mb_strlen($profile_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $profile_name when calling ConnectCarrierRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['profile_name'] = $profile_name;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return int|null
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param int|null $merchant_id Merchant id
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {

        if (!is_null($merchant_id) && ($merchant_id < 0)) {
            throw new \InvalidArgumentException('invalid value for $merchant_id when calling ConnectCarrierRequestBody., must be bigger than or equal to 0.');
        }

        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets oba_email
     *
     * @return string|null
     */
    public function getObaEmail()
    {
        return $this->container['oba_email'];
    }

    /**
     * Sets oba_email
     *
     * @param string|null $oba_email The oba email address
     *
     * @return self
     */
    public function setObaEmail($oba_email)
    {
        $this->container['oba_email'] = $oba_email;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string|null
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string|null $company_name Company name
     *
     * @return self
     */
    public function setCompanyName($company_name)
    {

        if (!is_null($company_name) && (mb_strlen($company_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $company_name when calling ConnectCarrierRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets street_line1
     *
     * @return string|null
     */
    public function getStreetLine1()
    {
        return $this->container['street_line1'];
    }

    /**
     * Sets street_line1
     *
     * @param string|null $street_line1 Street line1
     *
     * @return self
     */
    public function setStreetLine1($street_line1)
    {

        if (!is_null($street_line1) && (mb_strlen($street_line1) < 1)) {
            throw new \InvalidArgumentException('invalid length for $street_line1 when calling ConnectCarrierRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['street_line1'] = $street_line1;

        return $this;
    }

    /**
     * Gets street_line2
     *
     * @return string|null
     */
    public function getStreetLine2()
    {
        return $this->container['street_line2'];
    }

    /**
     * Sets street_line2
     *
     * @param string|null $street_line2 Street line2
     *
     * @return self
     */
    public function setStreetLine2($street_line2)
    {

        if (!is_null($street_line2) && (mb_strlen($street_line2) < 1)) {
            throw new \InvalidArgumentException('invalid length for $street_line2 when calling ConnectCarrierRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['street_line2'] = $street_line2;

        return $this;
    }

    /**
     * Gets street_line3
     *
     * @return string|null
     */
    public function getStreetLine3()
    {
        return $this->container['street_line3'];
    }

    /**
     * Sets street_line3
     *
     * @param string|null $street_line3 Street line3
     *
     * @return self
     */
    public function setStreetLine3($street_line3)
    {

        if (!is_null($street_line3) && (mb_strlen($street_line3) < 1)) {
            throw new \InvalidArgumentException('invalid length for $street_line3 when calling ConnectCarrierRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['street_line3'] = $street_line3;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Title
     *
     * @return self
     */
    public function setTitle($title)
    {

        if (!is_null($title) && (mb_strlen($title) < 1)) {
            throw new \InvalidArgumentException('invalid length for $title when calling ConnectCarrierRequestBody., must be bigger than or equal to 1.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets invoice
     *
     * @return UpsInvoice|null
     */
    public function getInvoice()
    {
        return $this->container['invoice'];
    }

    /**
     * Sets invoice
     *
     * @param UpsInvoice|null $invoice The UPS invoice
     *
     * @return self
     */
    public function setInvoice($invoice)
    {
        $this->container['invoice'] = $invoice;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

