<?php
/**
 * Carrier
 *
 * PHP version 5
 *
 * @category Class
 * @package  Nmusco\ShipEngine\v1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ShipEngine API
 *
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others.
 *
 * The version of the OpenAPI document: 1.1.202012041812
 * Contact: sales@shipengine.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nmusco\ShipEngine\v1\Models;

use \ArrayAccess;
use \Nmusco\ShipEngine\v1\ObjectSerializer;

/**
 * Carrier Class Doc Comment
 *
 * @category Class
 * @description A carrier object that represents a provider such as UPS, USPS, DHL, etc that has been tied to the current account.
 * @package  Nmusco\ShipEngine\v1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Carrier implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'carrier';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'carrier_id' => 'string',
        'carrier_code' => 'string',
        'account_number' => 'string',
        'requires_funded_amount' => 'bool',
        'balance' => 'double',
        'nickname' => 'string',
        'friendly_name' => 'string',
        'primary' => 'bool',
        'has_multi_package_supporting_services' => 'bool',
        'supports_label_messages' => 'bool',
        'services' => '\Nmusco\ShipEngine\v1\Models\Service[]',
        'packages' => '\Nmusco\ShipEngine\v1\Models\PackageType[]',
        'options' => '\Nmusco\ShipEngine\v1\Models\CarrierAdvancedOption[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'carrier_id' => null,
        'carrier_code' => null,
        'account_number' => null,
        'requires_funded_amount' => null,
        'balance' => 'double',
        'nickname' => null,
        'friendly_name' => null,
        'primary' => null,
        'has_multi_package_supporting_services' => null,
        'supports_label_messages' => null,
        'services' => null,
        'packages' => null,
        'options' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'carrier_id' => 'carrier_id',
        'carrier_code' => 'carrier_code',
        'account_number' => 'account_number',
        'requires_funded_amount' => 'requires_funded_amount',
        'balance' => 'balance',
        'nickname' => 'nickname',
        'friendly_name' => 'friendly_name',
        'primary' => 'primary',
        'has_multi_package_supporting_services' => 'has_multi_package_supporting_services',
        'supports_label_messages' => 'supports_label_messages',
        'services' => 'services',
        'packages' => 'packages',
        'options' => 'options'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'carrier_id' => 'setCarrierId',
        'carrier_code' => 'setCarrierCode',
        'account_number' => 'setAccountNumber',
        'requires_funded_amount' => 'setRequiresFundedAmount',
        'balance' => 'setBalance',
        'nickname' => 'setNickname',
        'friendly_name' => 'setFriendlyName',
        'primary' => 'setPrimary',
        'has_multi_package_supporting_services' => 'setHasMultiPackageSupportingServices',
        'supports_label_messages' => 'setSupportsLabelMessages',
        'services' => 'setServices',
        'packages' => 'setPackages',
        'options' => 'setOptions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'carrier_id' => 'getCarrierId',
        'carrier_code' => 'getCarrierCode',
        'account_number' => 'getAccountNumber',
        'requires_funded_amount' => 'getRequiresFundedAmount',
        'balance' => 'getBalance',
        'nickname' => 'getNickname',
        'friendly_name' => 'getFriendlyName',
        'primary' => 'getPrimary',
        'has_multi_package_supporting_services' => 'getHasMultiPackageSupportingServices',
        'supports_label_messages' => 'getSupportsLabelMessages',
        'services' => 'getServices',
        'packages' => 'getPackages',
        'options' => 'getOptions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['carrier_id'] = $data['carrier_id'] ?? null;
        $this->container['carrier_code'] = $data['carrier_code'] ?? null;
        $this->container['account_number'] = $data['account_number'] ?? null;
        $this->container['requires_funded_amount'] = $data['requires_funded_amount'] ?? null;
        $this->container['balance'] = $data['balance'] ?? null;
        $this->container['nickname'] = $data['nickname'] ?? null;
        $this->container['friendly_name'] = $data['friendly_name'] ?? null;
        $this->container['primary'] = $data['primary'] ?? null;
        $this->container['has_multi_package_supporting_services'] = $data['has_multi_package_supporting_services'] ?? null;
        $this->container['supports_label_messages'] = $data['supports_label_messages'] ?? null;
        $this->container['services'] = $data['services'] ?? null;
        $this->container['packages'] = $data['packages'] ?? null;
        $this->container['options'] = $data['options'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['account_number']) && (mb_strlen($this->container['account_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'account_number', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['balance']) && ($this->container['balance'] < 0)) {
            $invalidProperties[] = "invalid value for 'balance', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['nickname']) && (mb_strlen($this->container['nickname']) < 1)) {
            $invalidProperties[] = "invalid value for 'nickname', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['friendly_name']) && (mb_strlen($this->container['friendly_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'friendly_name', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets carrier_id
     *
     * @return string|null
     */
    public function getCarrierId()
    {
        return $this->container['carrier_id'];
    }

    /**
     * Sets carrier_id
     *
     * @param string|null $carrier_id A string that uniquely identifies the carrier.
     *
     * @return self
     */
    public function setCarrierId($carrier_id)
    {
        $this->container['carrier_id'] = $carrier_id;

        return $this;
    }

    /**
     * Gets carrier_code
     *
     * @return string|null
     */
    public function getCarrierCode()
    {
        return $this->container['carrier_code'];
    }

    /**
     * Sets carrier_code
     *
     * @param string|null $carrier_code A string that uniquely identifies the carrier.
     *
     * @return self
     */
    public function setCarrierCode($carrier_code)
    {
        $this->container['carrier_code'] = $carrier_code;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string|null
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string|null $account_number The account number that the carrier is connected to.
     *
     * @return self
     */
    public function setAccountNumber($account_number)
    {

        if (!is_null($account_number) && (mb_strlen($account_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $account_number when calling Carrier., must be bigger than or equal to 1.');
        }

        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets requires_funded_amount
     *
     * @return bool|null
     */
    public function getRequiresFundedAmount()
    {
        return $this->container['requires_funded_amount'];
    }

    /**
     * Sets requires_funded_amount
     *
     * @param bool|null $requires_funded_amount Indicates whether the carrier requires funding to use its services
     *
     * @return self
     */
    public function setRequiresFundedAmount($requires_funded_amount)
    {
        $this->container['requires_funded_amount'] = $requires_funded_amount;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return double|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param double|null $balance Current available balance
     *
     * @return self
     */
    public function setBalance($balance)
    {

        if (!is_null($balance) && ($balance < 0)) {
            throw new \InvalidArgumentException('invalid value for $balance when calling Carrier., must be bigger than or equal to 0.');
        }

        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets nickname
     *
     * @return string|null
     */
    public function getNickname()
    {
        return $this->container['nickname'];
    }

    /**
     * Sets nickname
     *
     * @param string|null $nickname Nickname given to the account when initially setting up the carrier.
     *
     * @return self
     */
    public function setNickname($nickname)
    {

        if (!is_null($nickname) && (mb_strlen($nickname) < 1)) {
            throw new \InvalidArgumentException('invalid length for $nickname when calling Carrier., must be bigger than or equal to 1.');
        }

        $this->container['nickname'] = $nickname;

        return $this;
    }

    /**
     * Gets friendly_name
     *
     * @return string|null
     */
    public function getFriendlyName()
    {
        return $this->container['friendly_name'];
    }

    /**
     * Sets friendly_name
     *
     * @param string|null $friendly_name Screen readable name
     *
     * @return self
     */
    public function setFriendlyName($friendly_name)
    {

        if (!is_null($friendly_name) && (mb_strlen($friendly_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $friendly_name when calling Carrier., must be bigger than or equal to 1.');
        }

        $this->container['friendly_name'] = $friendly_name;

        return $this;
    }

    /**
     * Gets primary
     *
     * @return bool|null
     */
    public function getPrimary()
    {
        return $this->container['primary'];
    }

    /**
     * Sets primary
     *
     * @param bool|null $primary Is this the primary carrier that is used by default when no carrier is specified in label/shipment creation
     *
     * @return self
     */
    public function setPrimary($primary)
    {
        $this->container['primary'] = $primary;

        return $this;
    }

    /**
     * Gets has_multi_package_supporting_services
     *
     * @return bool|null
     */
    public function getHasMultiPackageSupportingServices()
    {
        return $this->container['has_multi_package_supporting_services'];
    }

    /**
     * Sets has_multi_package_supporting_services
     *
     * @param bool|null $has_multi_package_supporting_services Carrier supports multiple packages per shipment
     *
     * @return self
     */
    public function setHasMultiPackageSupportingServices($has_multi_package_supporting_services)
    {
        $this->container['has_multi_package_supporting_services'] = $has_multi_package_supporting_services;

        return $this;
    }

    /**
     * Gets supports_label_messages
     *
     * @return bool|null
     */
    public function getSupportsLabelMessages()
    {
        return $this->container['supports_label_messages'];
    }

    /**
     * Sets supports_label_messages
     *
     * @param bool|null $supports_label_messages The carrier supports adding custom label messages to an order.
     *
     * @return self
     */
    public function setSupportsLabelMessages($supports_label_messages)
    {
        $this->container['supports_label_messages'] = $supports_label_messages;

        return $this;
    }

    /**
     * Gets services
     *
     * @return Service[]|null
     */
    public function getServices()
    {
        return $this->container['services'];
    }

    /**
     * Sets services
     *
     * @param Service[]|null $services A list of services that are offered by the carrier
     *
     * @return self
     */
    public function setServices($services)
    {
        $this->container['services'] = $services;

        return $this;
    }

    /**
     * Gets packages
     *
     * @return PackageType[]|null
     */
    public function getPackages()
    {
        return $this->container['packages'];
    }

    /**
     * Sets packages
     *
     * @param PackageType[]|null $packages A list of package types that are supported by the carrier
     *
     * @return self
     */
    public function setPackages($packages)
    {
        $this->container['packages'] = $packages;

        return $this;
    }

    /**
     * Gets options
     *
     * @return CarrierAdvancedOption[]|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param CarrierAdvancedOption[]|null $options A list of options that are available to that carrier
     *
     * @return self
     */
    public function setOptions($options)
    {
        $this->container['options'] = $options;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

